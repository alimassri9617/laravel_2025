# Laravel Backend Implementation for Delivery App System

I'll guide you through implementing the backend for your delivery app system using Laravel. This will be a step-by-step approach covering all the key features mentioned in your requirements.

## Step 1: Project Setup

First, let's set up the Laravel project and basic configuration:

```bash
composer create-project laravel/laravel delivery-app
cd delivery-app
```

Configure your `.env` file with database credentials:

```
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=delivery_app
DB_USERNAME=root
DB_PASSWORD=
```

## Step 2: Database Schema Design

Let's create migrations for all the necessary tables:

### Users Table (already exists, we'll modify it)

```bash
php artisan make:migration add_role_to_users_table
```

```php
// database/migrations/[timestamp]_add_role_to_users_table.php
public function up()
{
    Schema::table('users', function (Blueprint $table) {
        $table->enum('role', ['admin', 'client', 'driver'])->default('client');
        $table->string('phone')->nullable();
        $table->string('avatar')->nullable();
        $table->boolean('is_verified')->default(false);
        $table->string('verification_token')->nullable();
    });
}
```

### Drivers Table

```bash
php artisan make:model Driver -m
```

```php
// database/migrations/[timestamp]_create_drivers_table.php
public function up()
{
    Schema::create('drivers', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->enum('vehicle_type', ['motorcycle', 'car', 'van', 'truck']);
        $table->string('plate_number');
        $table->string('license_number');
        $table->enum('pricing_model', ['fixed', 'per_km']);
        $table->decimal('fixed_price', 10, 2)->nullable();
        $table->decimal('price_per_km', 10, 2)->nullable();
        $table->boolean('is_approved')->default(false);
        $table->decimal('rating', 3, 2)->default(0);
        $table->integer('total_ratings')->default(0);
        $table->timestamps();
    });
}
```

### Driver Working Areas

```bash
php artisan make:model DriverWorkingArea -m
```

```php
// database/migrations/[timestamp]_create_driver_working_areas_table.php
public function up()
{
    Schema::create('driver_working_areas', function (Blueprint $table) {
        $table->id();
        $table->foreignId('driver_id')->constrained()->onDelete('cascade');
        $table->string('city');
        $table->timestamps();
    });
}
```

### Deliveries Table

```bash
php artisan make:model Delivery -m
```

```php
// database/migrations/[timestamp]_create_deliveries_table.php
public function up()
{
    Schema::create('deliveries', function (Blueprint $table) {
        $table->id();
        $table->foreignId('client_id')->constrained('users')->onDelete('cascade');
        $table->foreignId('driver_id')->nullable()->constrained('users')->onDelete('set null');
        $table->string('pickup_location');
        $table->string('destination');
        $table->decimal('distance', 10, 2)->comment('in kilometers');
        $table->enum('package_type', ['small', 'medium', 'large', 'extra_large']);
        $table->decimal('package_weight', 10, 2)->comment('in kg');
        $table->text('special_instructions')->nullable();
        $table->enum('status', ['pending', 'accepted', 'in_progress', 'completed', 'cancelled'])->default('pending');
        $table->decimal('price', 10, 2);
        $table->enum('payment_method', ['credit_card', 'cryptocurrency', 'cash_on_delivery']);
        $table->boolean('is_paid')->default(false);
        $table->timestamp('pickup_time')->nullable();
        $table->timestamp('delivery_time')->nullable();
        $table->timestamps();
    });
}
```

### Payments Table

```bash
php artisan make:model Payment -m
```

```php
// database/migrations/[timestamp]_create_payments_table.php
public function up()
{
    Schema::create('payments', function (Blueprint $table) {
        $table->id();
        $table->foreignId('delivery_id')->constrained()->onDelete('cascade');
        $table->decimal('amount', 10, 2);
        $table->string('currency')->default('USD');
        $table->enum('method', ['credit_card', 'cryptocurrency', 'cash_on_delivery']);
        $table->string('transaction_id')->nullable();
        $table->enum('status', ['pending', 'completed', 'failed'])->default('pending');
        $table->json('payment_details')->nullable();
        $table->timestamps();
    });
}
```

### Reviews Table

```bash
php artisan make:model Review -m
```

```php
// database/migrations/[timestamp]_create_reviews_table.php
public function up()
{
    Schema::create('reviews', function (Blueprint $table) {
        $table->id();
        $table->foreignId('delivery_id')->constrained()->onDelete('cascade');
        $table->foreignId('client_id')->constrained('users')->onDelete('cascade');
        $table->foreignId('driver_id')->constrained('users')->onDelete('cascade');
        $table->integer('rating');
        $table->text('comment')->nullable();
        $table->timestamps();
    });
}
```

### Messages Table

```bash
php artisan make:model Message -m
```

```php
// database/migrations/[timestamp]_create_messages_table.php
public function up()
{
    Schema::create('messages', function (Blueprint $table) {
        $table->id();
        $table->foreignId('delivery_id')->constrained()->onDelete('cascade');
        $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
        $table->foreignId('receiver_id')->constrained('users')->onDelete('cascade');
        $table->text('message');
        $table->boolean('is_read')->default(false);
        $table->timestamps();
    });
}
```

### Loyalty Points Table

```bash
php artisan make:model LoyaltyPoint -m
```

```php
// database/migrations/[timestamp]_create_loyalty_points_table.php
public function up()
{
    Schema::create('loyalty_points', function (Blueprint $table) {
        $table->id();
        $table->foreignId('driver_id')->constrained('users')->onDelete('cascade');
        $table->integer('points');
        $table->decimal('kilometers', 10, 2);
        $table->string('description');
        $table->timestamps();
    });
}
```

Run the migrations:

```bash
php artisan migrate
```

## Step 3: Model Relationships

Now let's set up the model relationships:

### User Model

```php
// app/Models/User.php
namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
        'phone',
        'avatar',
        'is_verified',
        'verification_token'
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'is_verified' => 'boolean'
    ];

    public function driverProfile()
    {
        return $this->hasOne(Driver::class);
    }

    public function workingAreas()
    {
        return $this->hasManyThrough(DriverWorkingArea::class, Driver::class);
    }

    public function clientDeliveries()
    {
        return $this->hasMany(Delivery::class, 'client_id');
    }

    public function driverDeliveries()
    {
        return $this->hasMany(Delivery::class, 'driver_id');
    }

    public function sentMessages()
    {
        return $this->hasMany(Message::class, 'sender_id');
    }

    public function receivedMessages()
    {
        return $this->hasMany(Message::class, 'receiver_id');
    }

    public function reviews()
    {
        return $this->hasMany(Review::class, 'driver_id');
    }

    public function loyaltyPoints()
    {
        return $this->hasMany(LoyaltyPoint::class, 'driver_id');
    }

    public function isAdmin()
    {
        return $this->role === 'admin';
    }

    public function isDriver()
    {
        return $this->role === 'driver';
    }

    public function isClient()
    {
        return $this->role === 'client';
    }
}
```

### Driver Model

```php
// app/Models/Driver.php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Driver extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'vehicle_type',
        'plate_number',
        'license_number',
        'pricing_model',
        'fixed_price',
        'price_per_km',
        'is_approved',
        'rating',
        'total_ratings'
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function workingAreas()
    {
        return $this->hasMany(DriverWorkingArea::class);
    }

    public function deliveries()
    {
        return $this->hasMany(Delivery::class, 'driver_id');
    }

    public function reviews()
    {
        return $this->hasMany(Review::class, 'driver_id');
    }

    public function loyaltyPoints()
    {
        return $this->hasMany(LoyaltyPoint::class, 'driver_id');
    }
}
```

### Delivery Model

```php
// app/Models/Delivery.php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Delivery extends Model
{
    use HasFactory;

    protected $fillable = [
        'client_id',
        'driver_id',
        'pickup_location',
        'destination',
        'distance',
        'package_type',
        'package_weight',
        'special_instructions',
        'status',
        'price',
        'payment_method',
        'is_paid',
        'pickup_time',
        'delivery_time'
    ];

    protected $casts = [
        'pickup_time' => 'datetime',
        'delivery_time' => 'datetime',
        'is_paid' => 'boolean'
    ];

    public function client()
    {
        return $this->belongsTo(User::class, 'client_id');
    }

    public function driver()
    {
        return $this->belongsTo(User::class, 'driver_id');
    }

    public function payment()
    {
        return $this->hasOne(Payment::class);
    }

    public function review()
    {
        return $this->hasOne(Review::class);
    }

    public function messages()
    {
        return $this->hasMany(Message::class);
    }
}
```

### Payment Model

```php
// app/Models/Payment.php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Payment extends Model
{
    use HasFactory;

    protected $fillable = [
        'delivery_id',
        'amount',
        'currency',
        'method',
        'transaction_id',
        'status',
        'payment_details'
    ];

    protected $casts = [
        'payment_details' => 'array'
    ];

    public function delivery()
    {
        return $this->belongsTo(Delivery::class);
    }
}
```

### Review Model

```php
// app/Models/Review.php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Review extends Model
{
    use HasFactory;

    protected $fillable = [
        'delivery_id',
        'client_id',
        'driver_id',
        'rating',
        'comment'
    ];

    public function delivery()
    {
        return $this->belongsTo(Delivery::class);
    }

    public function client()
    {
        return $this->belongsTo(User::class, 'client_id');
    }

    public function driver()
    {
        return $this->belongsTo(User::class, 'driver_id');
    }
}
```

### Message Model

```php
// app/Models/Message.php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Message extends Model
{
    use HasFactory;

    protected $fillable = [
        'delivery_id',
        'sender_id',
        'receiver_id',
        'message',
        'is_read'
    ];

    protected $casts = [
        'is_read' => 'boolean'
    ];

    public function delivery()
    {
        return $this->belongsTo(Delivery::class);
    }

    public function sender()
    {
        return $this->belongsTo(User::class, 'sender_id');
    }

    public function receiver()
    {
        return $this->belongsTo(User::class, 'receiver_id');
    }
}
```

### LoyaltyPoint Model

```php
// app/Models/LoyaltyPoint.php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class LoyaltyPoint extends Model
{
    use HasFactory;

    protected $fillable = [
        'driver_id',
        'points',
        'kilometers',
        'description'
    ];

    public function driver()
    {
        return $this->belongsTo(User::class, 'driver_id');
    }
}
```

## Step 4: Authentication & User Registration

### Register Controller

```bash
php artisan make:controller Auth/RegisterController
```

```php
// app/Http/Controllers/Auth/RegisterController.php
namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Driver;
use App\Models\DriverWorkingArea;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Illuminate\Auth\Events\Registered;

class RegisterController extends Controller
{
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
            'phone' => 'required|string|max:20',
            'role' => 'required|in:client,driver',
            'vehicle_type' => 'required_if:role,driver',
            'plate_number' => 'required_if:role,driver',
            'license_number' => 'required_if:role,driver',
            'pricing_model' => 'required_if:role,driver',
            'fixed_price' => 'required_if:pricing_model,fixed|numeric|min:0',
            'price_per_km' => 'required_if:pricing_model,per_km|numeric|min:0',
            'working_areas' => 'required_if:role,driver|array',
            'working_areas.*' => 'string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $verificationToken = Str::random(60);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'phone' => $request->phone,
            'role' => $request->role,
            'verification_token' => $verificationToken,
        ]);

        if ($request->role === 'driver') {
            $driver = Driver::create([
                'user_id' => $user->id,
                'vehicle_type' => $request->vehicle_type,
                'plate_number' => $request->plate_number,
                'license_number' => $request->license_number,
                'pricing_model' => $request->pricing_model,
                'fixed_price' => $request->fixed_price,
                'price_per_km' => $request->price_per_km,
                'is_approved' => false,
            ]);

            foreach ($request->working_areas as $area) {
                DriverWorkingArea::create([
                    'driver_id' => $driver->id,
                    'city' => $area,
                ]);
            }
        }

        event(new Registered($user));

        return response()->json([
            'message' => 'User registered successfully. Please check your email for verification.',
            'user' => $user,
        ], 201);
    }
}
```

### Login Controller

```bash
php artisan make:controller Auth/LoginController
```

```php
// app/Http/Controllers/Auth/LoginController.php
namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;

class LoginController extends Controller
{
    public function login(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
            'password' => 'required',
        ]);

        if (Auth::attempt(['email' => $request->email, 'password' => $request->password])) {
            $user = Auth::user();

            if (!$user->is_verified) {
                Auth::logout();
                throw ValidationException::withMessages([
                    'email' => ['Your account is not verified. Please check your email for verification link.']
                ]);
            }

            if ($user->isDriver() && !$user->driverProfile->is_approved) {
                Auth::logout();
                throw ValidationException::withMessages([
                    'email' => ['Your driver account is pending approval. We will notify you once approved.']
                ]);
            }

            $token = $user->createToken('auth-token')->plainTextToken;

            return response()->json([
                'token' => $token,
                'user' => $user,
                'role' => $user->role,
            ]);
        }

        throw ValidationException::withMessages([
            'email' => ['The provided credentials are incorrect.']
        ]);
    }

    public function logout(Request $request)
    {
        $request->user()->currentAccessToken()->delete();

        return response()->json(['message' => 'Logged out successfully']);
    }
}
```

### Email Verification

```bash
php artisan make:controller Auth/VerificationController
```

```php
// app/Http/Controllers/Auth/VerificationController.php
namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;

class VerificationController extends Controller
{
    public function verify($token)
    {
        $user = User::where('verification_token', $token)->first();

        if (!$user) {
            return response()->json(['message' => 'Invalid verification token'], 404);
        }

        $user->update([
            'is_verified' => true,
            'verification_token' => null,
        ]);

        return response()->json(['message' => 'Email verified successfully']);
    }

    public function resend(Request $request)
    {
        $request->validate(['email' => 'required|email']);

        $user = User::where('email', $request->email)->first();

        if (!$user) {
            return response()->json(['message' => 'User not found'], 404);
        }

        if ($user->is_verified) {
            return response()->json(['message' => 'Email already verified'], 400);
        }

        $user->sendEmailVerificationNotification();

        return response()->json(['message' => 'Verification link resent']);
    }
}
```

## Step 5: API Routes

```php
// routes/api.php
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Auth\RegisterController;
use App\Http\Controllers\Auth\LoginController;
use App\Http\Controllers\Auth\VerificationController;

// Authentication Routes
Route::post('/register', [RegisterController::class, 'register']);
Route::post('/login', [LoginController::class, 'login']);
Route::post('/logout', [LoginController::class, 'logout'])->middleware('auth:sanctum');
Route::get('/verify-email/{token}', [VerificationController::class, 'verify']);
Route::post('/resend-verification', [VerificationController::class, 'resend']);

// Protected Routes
Route::middleware(['auth:sanctum', 'verified'])->group(function () {
    // User Profile
    Route::get('/user', function (Request $request) {
        return $request->user();
    });

    // Deliveries
    Route::apiResource('deliveries', DeliveryController::class);
    Route::post('/deliveries/{delivery}/assign-driver', [DeliveryController::class, 'assignDriver']);
    Route::post('/deliveries/{delivery}/update-status', [DeliveryController::class, 'updateStatus']);
    Route::post('/deliveries/{delivery}/rate', [DeliveryController::class, 'rateDriver']);
    Route::post('/deliveries/{delivery}/messages', [MessageController::class, 'store']);
    Route::get('/deliveries/{delivery}/messages', [MessageController::class, 'index']);

    // Payments
    Route::post('/deliveries/{delivery}/pay', [PaymentController::class, 'processPayment']);

    // Admin Routes
    Route::middleware(['admin'])->group(function () {
        Route::get('/admin/drivers/pending', [AdminController::class, 'pendingDrivers']);
        Route::post('/admin/drivers/{driver}/approve', [AdminController::class, 'approveDriver']);
        Route::post('/admin/drivers/{driver}/reject', [AdminController::class, 'rejectDriver']);
        Route::get('/admin/reports', [AdminController::class, 'generateReports']);
        Route::post('/admin/loyalty-rules', [AdminController::class, 'setLoyaltyRules']);
    });

    // Driver Routes
    Route::middleware(['driver'])->group(function () {
        Route::get('/driver/deliveries', [DriverController::class, 'deliveries']);
        Route::post('/driver/availability', [DriverController::class, 'setAvailability']);
        Route::get('/driver/earnings', [DriverController::class, 'earnings']);
    });
});
```

## Step 6: Delivery Controller

```bash
php artisan make:controller DeliveryController
```

```php
// app/Http/Controllers/DeliveryController.php
namespace App\Http\Controllers;

use App\Models\Delivery;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class DeliveryController extends Controller
{
    public function index(Request $request)
    {
        $user = $request->user();

        if ($user->isClient()) {
            $deliveries = $user->clientDeliveries()->with(['driver', 'payment'])->get();
        } elseif ($user->isDriver()) {
            $deliveries = $user->driverDeliveries()->with(['client', 'payment'])->get();
        } else {
            $deliveries = Delivery::with(['client', 'driver', 'payment'])->get();
        }

        return response()->json($deliveries);
    }

    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'pickup_location' => 'required|string',
            'destination' => 'required|string',
            'package_type' => 'required|in:small,medium,large,extra_large',
            'package_weight' => 'required|numeric|min:0.1',
            'special_instructions' => 'nullable|string',
            'auto_assign' => 'required|boolean',
            'driver_id' => 'required_if:auto_assign,false|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        // Calculate distance (in a real app, you'd use a mapping API)
        $distance = $this->calculateDistance($request->pickup_location, $request->destination);

        // Calculate price
        $price = $this->calculatePrice(
            $distance,
            $request->package_type,
            $request->package_weight,
            $request->auto_assign ? null : $request->driver_id
        );

        $delivery = Delivery::create([
            'client_id' => $request->user()->id,
            'driver_id' => $request->auto_assign ? $this->findAvailableDriver($request->pickup_location) : $request->driver_id,
            'pickup_location' => $request->pickup_location,
            'destination' => $request->destination,
            'distance' => $distance,
            'package_type' => $request->package_type,
            'package_weight' => $request->package_weight,
            'special_instructions' => $request->special_instructions,
            'status' => 'pending',
            'price' => $price,
            'payment_method' => 'cash_on_delivery', // Default, can be changed later
        ]);

        return response()->json($delivery, 201);
    }

    public function show(Delivery $delivery)
    {
        $delivery->load(['client', 'driver', 'payment', 'messages', 'review']);
        return response()->json($delivery);
    }

    public function update(Request $request, Delivery $delivery)
    {
        $validator = Validator::make($request->all(), [
            'pickup_location' => 'sometimes|required|string',
            'destination' => 'sometimes|required|string',
            'package_type' => 'sometimes|required|in:small,medium,large,extra_large',
            'package_weight' => 'sometimes|required|numeric|min:0.1',
            'special_instructions' => 'nullable|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $delivery->update($request->only([
            'pickup_location',
            'destination',
            'package_type',
            'package_weight',
            'special_instructions',
        ]));

        return response()->json($delivery);
    }

    public function destroy(Delivery $delivery)
    {
        $delivery->delete();
        return response()->json(null, 204);
    }

    public function assignDriver(Request $request, Delivery $delivery)
    {
        $validator = Validator::make($request->all(), [
            'driver_id' => 'required|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $delivery->update([
            'driver_id' => $request->driver_id,
            'status' => 'accepted',
        ]);

        // Notify driver about new assignment
        // $driver = User::find($request->driver_id);
        // $driver->notify(new NewDeliveryAssignment($delivery));

        return response()->json($delivery);
    }

    public function updateStatus(Request $request, Delivery $delivery)
    {
        $validator = Validator::make($request->all(), [
            'status' => 'required|in:accepted,in_progress,completed,cancelled',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $delivery->update([
            'status' => $request->status,
            'delivery_time' => $request->status === 'completed' ? now() : null,
        ]);

        // Notify client about status change
        // $delivery->client->notify(new DeliveryStatusUpdated($delivery));

        return response()->json($delivery);
    }

    public function rateDriver(Request $request, Delivery $delivery)
    {
        $validator = Validator::make($request->all(), [
            'rating' => 'required|integer|min:1|max:5',
            'comment' => 'nullable|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        if ($delivery->client_id !== $request->user()->id) {
            return response()->json(['message' => 'Unauthorized'], 403);
        }

        if ($delivery->status !== 'completed') {
            return response()->json(['message' => 'Delivery must be completed before rating'], 400);
        }

        $review = $delivery->review()->create([
            'client_id' => $request->user()->id,
            'driver_id' => $delivery->driver_id,
            'rating' => $request->rating,
            'comment' => $request->comment,
        ]);

        // Update driver's average rating
        $driver = $delivery->driver;
        $driver->driverProfile->update([
            'total_ratings' => $driver->driverProfile->total_ratings + 1,
            'rating' => ($driver->driverProfile->rating * $driver->driverProfile->total_ratings + $request->rating) / ($driver->driverProfile->total_ratings + 1),
        ]);

        return response()->json($review, 201);
    }

    private function calculateDistance($pickup, $destination)
    {
        // In a real app, you'd use Google Maps API or similar
        return rand(1, 50); // Random distance for demo
    }

    private function calculatePrice($distance, $packageType, $packageWeight, $driverId = null)
    {
        $basePrice = 5.00;
        $typeMultipliers = [
            'small' => 1.0,
            'medium' => 1.2,
            'large' => 1.5,
            'extra_large' => 2.0,
        ];

        $weightMultiplier = min(1 + ($packageWeight / 10), 3); // Max 3x multiplier

        if ($driverId) {
            $driver = User::find($driverId)->driverProfile;
            if ($driver->pricing_model === 'fixed') {
                return $driver->fixed_price * $typeMultipliers[$packageType] * $weightMultiplier;
            } else {
                return $basePrice + ($distance * $driver->price_per_km) * $typeMultipliers[$packageType] * $weightMultiplier;
            }
        }

        // Default pricing if no specific driver
        return $basePrice + ($distance * 1.20) * $typeMultipliers[$packageType] * $weightMultiplier;
    }

    private function findAvailableDriver($location)
    {
        // In a real app, you'd find the nearest available driver
        $driver = User::where('role', 'driver')
            ->whereHas('driverProfile', function ($query) {
                $query->where('is_approved', true);
            })
            ->whereHas('workingAreas', function ($query) use ($location) {
                $query->where('city', 'like', "%$location%");
            })
            ->inRandomOrder()
            ->first();

        return $driver ? $driver->id : null;
    }
}
```

## Step 7: Payment Controller

```bash
php artisan make:controller PaymentController
```

```php
// app/Http/Controllers/PaymentController.php
namespace App\Http\Controllers;

use App\Models\Delivery;
use App\Models\Payment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class PaymentController extends Controller
{
    public function processPayment(Request $request, Delivery $delivery)
    {
        $validator = Validator::make($request->all(), [
            'payment_method' => 'required|in:credit_card,cryptocurrency,cash_on_delivery',
            'card_number' => 'required_if:payment_method,credit_card',
            'card_expiry' => 'required_if:payment_method,credit_card',
            'card_cvv' => 'required_if:payment_method,credit_card',
            'cryptocurrency' => 'required_if:payment_method,cryptocurrency|in:bitcoin,ethereum,litecoin',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        if ($delivery->client_id !== $request->user()->id) {
            return response()->json(['message' => 'Unauthorized'], 403);
        }

        if ($delivery->is_paid) {
            return response()->json(['message' => 'Delivery already paid'], 400);
        }

        $paymentDetails = [];
        $transactionId = null;
        $status = 'pending';

        if ($request->payment_method === 'credit_card') {
            // In a real app, you'd process the payment with Stripe/PayPal/etc.
            $paymentDetails = [
                'card_last4' => substr($request->card_number, -4),
                'card_brand' => $this->detectCardType($request->card_number),
            ];
            $transactionId = 'cc_' . uniqid();
            $status = 'completed';
        } elseif ($request->payment_method === 'cryptocurrency') {
            $paymentDetails = [
                'cryptocurrency' => $request->cryptocurrency,
                'amount' => $this->convertToCrypto($delivery->price, $request->cryptocurrency),
                'wallet_address' => config('app.crypto_wallet_address'),
            ];
            $transactionId = 'crypto_' . uniqid();
            $status = 'pending'; // Would wait for blockchain confirmation
        }

        $payment = Payment::create([
            'delivery_id' => $delivery->id,
            'amount' => $delivery->price,
            'method' => $request->payment_method,
            'transaction_id' => $transactionId,
            'status' => $status,
            'payment_details' => $paymentDetails,
        ]);

        if ($status === 'completed') {
            $delivery->update([
                'is_paid' => true,
                'payment_method' => $request->payment_method,
            ]);
        }

        return response()->json($payment, 201);
    }

    private function detectCardType($cardNumber)
    {
        $firstDigit = substr($cardNumber, 0, 1);
        switch ($firstDigit) {
            case '3': return 'amex';
            case '4': return 'visa';
            case '5': return 'mastercard';
            case '6': return 'discover';
            default: return 'unknown';
        }
    }

    private function convertToCrypto($amount, $crypto)
    {
        // In a real app, you'd get current rates from an API
        $rates = [
            'bitcoin' => 28450.00,
            'ethereum' => 1780.00,
            'litecoin' => 85.00,
        ];

        return $amount / $rates[$crypto];
    }
}
```

## Step 8: Message Controller

```bash
php artisan make:controller MessageController
```

```php
// app/Http/Controllers/MessageController.php
namespace App\Http\Controllers;

use App\Models\Delivery;
use App\Models\Message;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class MessageController extends Controller
{
    public function index(Delivery $delivery)
    {
        $messages = $delivery->messages()
            ->with(['sender', 'receiver'])
            ->orderBy('created_at', 'asc')
            ->get();

        return response()->json($messages);
    }

    public function store(Request $request, Delivery $delivery)
    {
        $validator = Validator::make($request->all(), [
            'message' => 'required|string|max:1000',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $user = $request->user();
        $receiverId = $user->id === $delivery->client_id ? $delivery->driver_id : $delivery->client_id;

        $message = Message::create([
            'delivery_id' => $delivery->id,
            'sender_id' => $user->id,
            'receiver_id' => $receiverId,
            'message' => $request->message,
        ]);

        // In a real app, you'd send a real-time notification
        // event(new NewMessage($message));

        return response()->json($message, 201);
    }
}
```

## Step 9: Admin Controller

```bash
php artisan make:controller AdminController
```

```php
// app/Http/Controllers/AdminController.php
namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Driver;
use App\Models\Delivery;
use App\Models\LoyaltyPoint;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class AdminController extends Controller
{
    public function pendingDrivers()
    {
        $drivers = User::where('role', 'driver')
            ->whereHas('driverProfile', function ($query) {
                $query->where('is_approved', false);
            })
            ->with('driverProfile')
            ->get();

        return response()->json($drivers);
    }

    public function approveDriver(Request $request, User $driver)
    {
        if ($driver->role !== 'driver') {
            return response()->json(['message' => 'User is not a driver'], 400);
        }

        $driver->driverProfile->update(['is_approved' => true]);

        // Notify driver about approval
        // $driver->notify(new DriverApproved());

        return response()->json(['message' => 'Driver approved successfully']);
    }

    public function rejectDriver(Request $request, User $driver)
    {
        if ($driver->role !== 'driver') {
            return response()->json(['message' => 'User is not a driver'], 400);
        }

        $driver->driverProfile->delete();
        $driver->delete();

        // Notify driver about rejection
        // $driver->notify(new DriverRejected($request->reason));

        return response()->json(['message' => 'Driver rejected and removed']);
    }

    public function generateReports()
    {
        $totalDeliveries = Delivery::count();
        $completedDeliveries = Delivery::where('status', 'completed')->count();
        $totalRevenue = Payment::where('status', 'completed')->sum('amount');
        $activeDrivers = User::where('role', 'driver')
            ->whereHas('driverProfile', function ($query) {
                $query->where('is_approved', true);
            })
            ->count();

        $topDrivers = User::where('role', 'driver')
            ->withCount(['driverDeliveries as completed_deliveries' => function ($query) {
                $query->where('status', 'completed');
            }])
            ->orderBy('completed_deliveries', 'desc')
            ->limit(5)
            ->get();

        return response()->json([
            'total_deliveries' => $totalDeliveries,
            'completed_deliveries' => $completedDeliveries,
            'total_revenue' => $totalRevenue,
            'active_drivers' => $activeDrivers,
            'top_drivers' => $topDrivers,
        ]);
    }

    public function setLoyaltyRules(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'points_per_km' => 'required|numeric|min:0',
            'description' => 'required|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        config(['delivery.points_per_km' => $request->points_per_km]);

        return response()->json([
            'message' => 'Loyalty rules updated successfully',
            'points_per_km' => $request->points_per_km,
        ]);
    }
}
```

## Step 10: Driver Controller

```bash
php artisan make:controller DriverController
```

```php
// app/Http/Controllers/DriverController.php
namespace App\Http\Controllers;

use App\Models\User;
use App\Models\Delivery;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class DriverController extends Controller
{
    public function deliveries(Request $request)
    {
        $deliveries = $request->user()
            ->driverDeliveries()
            ->with(['client', 'payment'])
            ->get();

        return response()->json($deliveries);
    }

    public function setAvailability(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'is_available' => 'required|boolean',
            'working_areas' => 'sometimes|array',
            'working_areas.*' => 'string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        $driver = $request->user()->driverProfile;

        if ($request->has('working_areas')) {
            $driver->workingAreas()->delete();
            foreach ($request->working_areas as $area) {
                $driver->workingAreas()->create(['city' => $area]);
            }
        }

        return response()->json(['message' => 'Availability updated successfully']);
    }

    public function earnings(Request $request)
    {
        $completedDeliveries = $request->user()
            ->driverDeliveries()
            ->where('status', 'completed')
            ->with('payment')
            ->get();

        $totalEarnings = $completedDeliveries->sum('price');
        $pendingPayments = $completedDeliveries->where('is_paid', false)->sum('price');
        $completedCount = $completedDeliveries->count();

        // Calculate loyalty points
        $totalKilometers = $completedDeliveries->sum('distance');
        $pointsPerKm = config('delivery.points_per_km', 1);
        $loyaltyPoints = $totalKilometers * $pointsPerKm;

        return response()->json([
            'total_earnings' => $totalEarnings,
            'pending_payments' => $pendingPayments,
            'completed_deliveries' => $completedCount,
            'loyalty_points' => $loyaltyPoints,
            'total_kilometers' => $totalKilometers,
        ]);
    }
}
```

## Step 11: Middleware

Create an admin middleware:

```bash
php artisan make:middleware AdminMiddleware
```

```php
// app/Http/Middleware/AdminMiddleware.php
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class AdminMiddleware
{
    public function handle(Request $request, Closure $next)
    {
        if (!$request->user() || !$request->user()->isAdmin()) {
            return response()->json(['message' => 'Unauthorized'], 403);
        }

        return $next($request);
    }
}
```

Register the middleware in `app/Http/Kernel.php`:

```php
protected $routeMiddleware = [
    // ...
    'admin' => \App\Http\Middleware\AdminMiddleware::class,
    'driver' => \App\Http\Middleware\DriverMiddleware::class,
];
```

## Step 12: Notifications

Create notification classes for important events:

```bash
php artisan make:notification NewDeliveryAssignment
php artisan make:notification DeliveryStatusUpdated
php artisan make:notification DriverApproved
php artisan make:notification DriverRejected
```

Example for NewDeliveryAssignment:

```php
// app/Notifications/NewDeliveryAssignment.php
namespace App\Notifications;

use App\Models\Delivery;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class NewDeliveryAssignment extends Notification implements ShouldQueue
{
    use Queueable;

    public $delivery;

    public function __construct(Delivery $delivery)
    {
        $this->delivery = $delivery;
    }

    public function via($notifiable)
    {
        return ['database', 'mail']; // And any other channels like SMS, Firebase, etc.
    }

    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->subject('New Delivery Assignment')
            ->line('You have been assigned a new delivery.')
            ->action('View Delivery', url('/deliveries/' . $this->delivery->id))
            ->line('Thank you for using our application!');
    }

    public function toArray($notifiable)
    {
        return [
            'delivery_id' => $this->delivery->id,
            'pickup_location' => $this->delivery->pickup_location,
            'destination' => $this->delivery->destination,
            'price' => $this->delivery->price,
            'message' => 'You have a new delivery assignment',
        ];
    }
}
```

## Step 13: Real-time Features with Laravel Echo and Pusher

Install required packages:

```bash
composer require pusher/pusher-php-server
npm install --save laravel-echo pusher-js
```

Configure broadcasting in `.env`:

```
BROADCAST_DRIVER=pusher
PUSHER_APP_ID=your-app-id
PUSHER_APP_KEY=your-app-key
PUSHER_APP_SECRET=your-app-secret
PUSHER_APP_CLUSTER=mt1
```

Create events for real-time updates:

```bash
php artisan make:event NewMessage
php artisan make:event DeliveryStatusChanged
```

Example for NewMessage:

```php
// app/Events/NewMessage.php
namespace App\Events;

use App\Models\Message;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class NewMessage implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public $message;

    public function __construct(Message $message)
    {
        $this->message = $message;
    }

    public function broadcastOn()
    {
        return new Channel('delivery.' . $this->message->delivery_id);
    }

    public function broadcastWith()
    {
        return [
            'id' => $this->message->id,
            'delivery_id' => $this->message->delivery_id,
            'sender_id' => $this->message->sender_id,
            'receiver_id' => $this->message->receiver_id,
            'message' => $this->message->message,
            'created_at' => $this->message->created_at->toDateTimeString(),
            'sender' => $this->message->sender->only(['id', 'name', 'avatar']),
        ];
    }
}
```

Update the MessageController to broadcast events:

```php
// In MessageController@store
event(new NewMessage($message));
```

## Step 14: Testing the API

You can now test your API endpoints using Postman or any API client. Here are some example requests:

### Register a Client
```
POST /api/register
Content-Type: application/json

{
    "name": "John Client",
    "email": "client@example.com",
    "password": "password",
    "password_confirmation": "password",
    "phone": "1234567890",
    "role": "client"
}
```

### Register a Driver
```
POST /api/register
Content-Type: application/json

{
    "name": "Jane Driver",
    "email": "driver@example.com",
    "password": "password",
    "password_confirmation": "password",
    "phone": "0987654321",
    "role": "driver",
    "vehicle_type": "car",
    "plate_number": "ABC123",
    "license_number": "DL123456",
    "pricing_model": "per_km",
    "price_per_km": 1.5,
    "working_areas": ["Beirut", "Jounieh"]
}
```

### Login
```
POST /api/login
Content-Type: application/json

{
    "email": "client@example.com",
    "password": "password"
}
```

### Create a Delivery (as Client)
```
POST /api/deliveries
Authorization: Bearer [token]
Content-Type: application/json

{
    "pickup_location": "Beirut, Hamra",
    "destination": "Beirut, Verdun",
    "package_type": "medium",
    "package_weight": 5,
    "special_instructions": "Fragile items",
    "auto_assign": true
}
```

### Update Delivery Status (as Driver)
```
POST /api/deliveries/1/update-status
Authorization: Bearer [token]
Content-Type: application/json

{
    "status": "in_progress"
}
```

### Send a Message
```
POST /api/deliveries/1/messages
Authorization: Bearer [token]
Content-Type: application/json

{
    "message": "I'm on my way!"
}
```

## Step 15: Deployment Considerations

When deploying to production, consider:

1. **Environment Configuration**: Set proper values in `.env` for production
2. **Queue Workers**: Set up supervisor to handle queues for notifications
3. **Websockets**: Configure Laravel Echo Server or Pusher for real-time features
4. **Caching**: Implement caching for frequently accessed data
5. **Security**: Enable HTTPS, rate limiting, and other security measures
6. **Monitoring**: Set up error tracking and performance monitoring
7. **Backups**: Implement database backups

## Conclusion

This implementation provides a complete backend for your delivery app system with Laravel. It includes:

1. User authentication and role management
2. Client and driver registration
3. Delivery request creation and management
4. Payment processing with multiple methods
5. Real-time messaging between clients and drivers
6. Admin dashboard for managing drivers and viewing reports
7. Loyalty program for drivers

The API is designed to work with your existing frontend, providing all the necessary endpoints to support the features shown in your HTML templates.

Remember to:
- Add more validation and error handling as needed
- Implement proper logging
- Write tests for all critical functionality
- Consider adding API documentation with tools like Swagger

Would you like me to elaborate on any specific part of this implementation?

---------------------------------------------------------------------------------------------

front end 

# Laravel Views Implementation for Delivery App System

I'll create Laravel views that match your existing HTML files while connecting them to the backend we've implemented. I'll organize them to work with Laravel's blade templating system and maintain all the functionality from your original files.

## Step 1: Layout Structure

First, let's create a master layout that all pages will extend:

```bash
mkdir -p resources/views/layouts
touch resources/views/layouts/app.blade.php
```

```php
<!-- resources/views/layouts/app.blade.php -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delivery App - @yield('title')</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="{{ asset('css/style.css') }}">
    @stack('styles')
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{{ route('home') }}">DeliveryApp</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ route('home') }}">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#features">Features</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#how-it-works">How It Works</a>
                    </li>
                    @auth
                        @if(auth()->user()->isAdmin())
                            <li class="nav-item">
                                <a class="nav-link" href="{{ route('admin.dashboard') }}">Admin Dashboard</a>
                            </li>
                        @elseif(auth()->user()->isDriver())
                            <li class="nav-item">
                                <a class="nav-link" href="{{ route('driver.dashboard') }}">Driver Dashboard</a>
                            </li>
                        @else
                            <li class="nav-item">
                                <a class="nav-link" href="{{ route('client.dashboard') }}">Client Dashboard</a>
                            </li>
                        @endif
                        <li class="nav-item">
                            <form action="{{ route('logout') }}" method="POST">
                                @csrf
                                <button type="submit" class="nav-link btn btn-link">Logout</button>
                            </form>
                        </li>
                    @else
                        <li class="nav-item">
                            <a class="nav-link" href="{{ route('login') }}">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link btn btn-outline-light" href="{{ route('register') }}">Register</a>
                        </li>
                    @endauth
                </ul>
            </div>
        </div>
    </nav>

    <main>
        @yield('content')
    </main>

    <footer class="bg-dark text-white py-3">
        <div class="container text-center">
            <p class="mb-0">&copy; {{ date('Y') }} DeliveryApp. All rights reserved.</p>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ asset('js/script.js') }}"></script>
    @stack('scripts')
</body>
</html>
```

## Step 2: Home Page

```bash
touch resources/views/home.blade.php
```

```php
<!-- resources/views/home.blade.php -->
@extends('layouts.app')

@section('title', 'Home')

@section('content')
    <!-- Hero Section -->
    <section class="hero-section bg-light py-5">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6">
                    <h1 class="display-4 fw-bold mb-4">Fast & Reliable Delivery Services</h1>
                    <p class="lead mb-4">Connect with trusted drivers for all your delivery needs. Real-time tracking, secure payments, and excellent service.</p>
                    <div class="d-flex gap-3">
                        <a href="{{ route('register') }}" class="btn btn-primary btn-lg">Get Started</a>
                        <a href="#how-it-works" class="btn btn-outline-primary btn-lg">Learn More</a>
                    </div>
                </div>
                <div class="col-lg-6">
                    <img src="{{ asset('img/delivery-hero.png') }}" alt="Delivery App" class="img-fluid">
                </div>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section id="features" class="py-5">
        <div class="container">
            <h2 class="text-center mb-5">Why Choose Our Delivery App</h2>
            <div class="row g-4">
                <div class="col-md-4">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body text-center p-4">
                            <div class="feature-icon bg-primary bg-opacity-10 text-primary rounded-circle p-3 mb-3 mx-auto">
                                <i class="fas fa-map-marker-alt fa-2x"></i>
                            </div>
                            <h5 class="card-title">Real-Time Tracking</h5>
                            <p class="card-text">Track your delivery in real-time with live GPS updates and estimated arrival time.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body text-center p-4">
                            <div class="feature-icon bg-primary bg-opacity-10 text-primary rounded-circle p-3 mb-3 mx-auto">
                                <i class="fas fa-shield-alt fa-2x"></i>
                            </div>
                            <h5 class="card-title">Secure Payments</h5>
                            <p class="card-text">Multiple payment options including credit cards, cryptocurrency, and cash on delivery.</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body text-center p-4">
                            <div class="feature-icon bg-primary bg-opacity-10 text-primary rounded-circle p-3 mb-3 mx-auto">
                                <i class="fas fa-headset fa-2x"></i>
                            </div>
                            <h5 class="card-title">24/7 Support</h5>
                            <p class="card-text">Dedicated customer support available anytime you need assistance.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- How It Works Section -->
    <section id="how-it-works" class="py-5 bg-light">
        <div class="container">
            <h2 class="text-center mb-5">How It Works</h2>
            <div class="row g-4">
                <div class="col-md-4">
                    <div class="step-card text-center">
                        <div class="step-number bg-primary text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3">1</div>
                        <h4>Create Account</h4>
                        <p>Register as a client or driver in just a few simple steps.</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="step-card text-center">
                        <div class="step-number bg-primary text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3">2</div>
                        <h4>Request Delivery</h4>
                        <p>Enter your delivery details and choose a driver or auto-assign.</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="step-card text-center">
                        <div class="step-number bg-primary text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3">3</div>
                        <h4>Track & Receive</h4>
                        <p>Track your package in real-time and receive it safely.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
@endsection
```

## Step 3: Authentication Views

### Login View

```bash
touch resources/views/auth/login.blade.php
```

```php
<!-- resources/views/auth/login.blade.php -->
@extends('layouts.app')

@section('title', 'Login')

@section('content')
<section class="py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card shadow">
                    <div class="card-body p-4 p-md-5">
                        <h2 class="text-center mb-4">Login to Your Account</h2>
                        <form id="loginForm" method="POST" action="{{ route('login') }}">
                            @csrf
                            <div class="mb-3">
                                <label for="email" class="form-label">Email address</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="remember" name="remember">
                                <label class="form-check-label" for="remember">Remember me</label>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Login</button>
                            <div class="text-center mt-3">
                                <a href="#" class="text-decoration-none">Forgot password?</a>
                            </div>
                            <hr>
                            <div class="text-center">
                                <p class="mb-0">Don't have an account? <a href="{{ route('register') }}" class="text-primary">Register</a></p>
                            </div>
                        </form>
                        <div class="social-login mt-4">
                            <p class="text-center mb-3">Or login with</p>
                            <div class="d-flex justify-content-center gap-3">
                                <a href="{{ route('social.login', 'google') }}" class="btn btn-outline-primary"><i class="fab fa-google"></i> Google</a>
                                <a href="{{ route('social.login', 'facebook') }}" class="btn btn-outline-primary"><i class="fab fa-facebook-f"></i> Facebook</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@push('scripts')
<script>
    document.getElementById('loginForm').addEventListener('submit', function(e) {
        e.preventDefault();
        this.submit();
    });
</script>
@endpush
@endsection
```

### Register View

```bash
touch resources/views/auth/register.blade.php
```

```php
<!-- resources/views/auth/register.blade.php -->
@extends('layouts.app')

@section('title', 'Register')

@section('content')
<section class="py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow">
                    <div class="card-body p-4 p-md-5">
                        <h2 class="text-center mb-4">Create Your Account</h2>
                        
                        <!-- Registration Type Selection -->
                        <div class="row mb-4 g-3">
                            <div class="col-md-6">
                                <div class="registration-type card border p-4 text-center h-100 active" id="clientType">
                                    <i class="fas fa-user fa-3x text-primary mb-3"></i>
                                    <h4>Register as Client</h4>
                                    <p class="text-muted">I want to request delivery services</p>
                                    <div class="form-check d-flex justify-content-center">
                                        <input class="form-check-input" type="radio" name="role" id="clientRadio" value="client" checked>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="registration-type card border p-4 text-center h-100" id="driverType">
                                    <i class="fas fa-truck fa-3x text-primary mb-3"></i>
                                    <h4>Register as Driver</h4>
                                    <p class="text-muted">I want to provide delivery services</p>
                                    <div class="form-check d-flex justify-content-center">
                                        <input class="form-check-input" type="radio" name="role" id="driverRadio" value="driver">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Client Registration Form -->
                        <form id="clientForm" method="POST" action="{{ route('register') }}">
                            @csrf
                            <input type="hidden" name="role" value="client">
                            <h5 class="mb-4">Client Information</h5>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label for="name" class="form-label">First Name</label>
                                    <input type="text" class="form-control" id="name" name="name" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="last_name" class="form-label">Last Name</label>
                                    <input type="text" class="form-control" id="last_name" name="last_name" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="email" class="form-label">Email Address</label>
                                    <input type="email" class="form-control" id="email" name="email" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="phone" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="phone" name="phone" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="password" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="password" name="password" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="password_confirmation" class="form-label">Confirm Password</label>
                                    <input type="password" class="form-control" id="password_confirmation" name="password_confirmation" required>
                                </div>
                                <div class="col-12">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="terms" name="terms" required>
                                        <label class="form-check-label" for="terms">
                                            I agree to the <a href="#">Terms and Conditions</a>
                                        </label>
                                    </div>
                                </div>
                                <div class="col-12 mt-3">
                                    <button type="submit" class="btn btn-primary w-100">Register as Client</button>
                                </div>
                            </div>
                        </form>

                        <!-- Driver Registration Form -->
                        <form id="driverForm" method="POST" action="{{ route('register') }}" style="display: none;">
                            @csrf
                            <input type="hidden" name="role" value="driver">
                            <h5 class="mb-4">Driver Information</h5>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label for="driver_name" class="form-label">First Name</label>
                                    <input type="text" class="form-control" id="driver_name" name="name" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="driver_last_name" class="form-label">Last Name</label>
                                    <input type="text" class="form-control" id="driver_last_name" name="last_name" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="driver_email" class="form-label">Email Address</label>
                                    <input type="email" class="form-control" id="driver_email" name="email" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="driver_phone" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="driver_phone" name="phone" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="driver_password" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="driver_password" name="password" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="driver_password_confirmation" class="form-label">Confirm Password</label>
                                    <input type="password" class="form-control" id="driver_password_confirmation" name="password_confirmation" required>
                                </div>
                                
                                <!-- Driver Specific Fields -->
                                <div class="col-md-6">
                                    <label for="vehicle_type" class="form-label">Vehicle Type</label>
                                    <select class="form-select" id="vehicle_type" name="vehicle_type" required>
                                        <option value="">Select Vehicle</option>
                                        <option value="motorcycle">Motorcycle</option>
                                        <option value="car">Car</option>
                                        <option value="van">Van</option>
                                        <option value="truck">Truck</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="plate_number" class="form-label">Plate Number</label>
                                    <input type="text" class="form-control" id="plate_number" name="plate_number" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="license_number" class="form-label">Driver License Number</label>
                                    <input type="text" class="form-control" id="license_number" name="license_number" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="pricing_model" class="form-label">Pricing Model</label>
                                    <select class="form-select" id="pricing_model" name="pricing_model" required>
                                        <option value="">Select Pricing</option>
                                        <option value="fixed">Fixed Price per Delivery</option>
                                        <option value="per_km">Per Kilometer</option>
                                    </select>
                                </div>
                                <div class="col-12">
                                    <label for="working_areas" class="form-label">Working Areas (Cities)</label>
                                    <select class="form-select" id="working_areas" name="working_areas[]" multiple required>
                                        <option value="beirut">Beirut</option>
                                        <option value="tripoli">Tripoli</option>
                                        <option value="saida">Saida</option>
                                        <option value="tyre">Tyre</option>
                                        <option value="jounieh">Jounieh</option>
                                        <option value="zahle">Zahle</option>
                                    </select>
                                    <small class="text-muted">Hold Ctrl to select multiple cities</small>
                                </div>
                                <div class="col-12">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="driver_terms" name="terms" required>
                                        <label class="form-check-label" for="driver_terms">
                                            I agree to the <a href="#">Terms and Conditions</a>
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="background_check" name="background_check" required>
                                        <label class="form-check-label" for="background_check">
                                            I consent to a background check
                                        </label>
                                    </div>
                                </div>
                                <div class="col-12 mt-3">
                                    <button type="submit" class="btn btn-primary w-100">Register as Driver</button>
                                </div>
                            </div>
                        </form>

                        <hr class="my-4">
                        <div class="text-center">
                            <p class="mb-0">Already have an account? <a href="{{ route('login') }}" class="text-primary">Login</a></p>
                        </div>
                        <div class="social-login mt-4">
                            <p class="text-center mb-3">Or register with</p>
                            <div class="d-flex justify-content-center gap-3">
                                <a href="{{ route('social.register', 'google') }}" class="btn btn-outline-primary"><i class="fab fa-google"></i> Google</a>
                                <a href="{{ route('social.register', 'facebook') }}" class="btn btn-outline-primary"><i class="fab fa-facebook-f"></i> Facebook</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const clientType = document.getElementById('clientType');
        const driverType = document.getElementById('driverType');
        const clientForm = document.getElementById('clientForm');
        const driverForm = document.getElementById('driverForm');
        const clientRadio = document.getElementById('clientRadio');
        const driverRadio = document.getElementById('driverRadio');

        clientType.addEventListener('click', function() {
            clientType.classList.add('active');
            driverType.classList.remove('active');
            clientForm.style.display = 'block';
            driverForm.style.display = 'none';
            clientRadio.checked = true;
        });

        driverType.addEventListener('click', function() {
            driverType.classList.add('active');
            clientType.classList.remove('active');
            driverForm.style.display = 'block';
            clientForm.style.display = 'none';
            driverRadio.checked = true;
        });

        // Form validation for client registration
        const clientRegisterForm = document.getElementById('clientForm');
        if (clientRegisterForm) {
            clientRegisterForm.addEventListener('submit', function(e) {
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('password_confirmation').value;
                
                if (password !== confirmPassword) {
                    e.preventDefault();
                    alert('Passwords do not match');
                    return;
                }
                
                if (!document.getElementById('terms').checked) {
                    e.preventDefault();
                    alert('You must agree to the terms and conditions');
                    return;
                }
            });
        }

        // Form validation for driver registration
        const driverRegisterForm = document.getElementById('driverForm');
        if (driverRegisterForm) {
            driverRegisterForm.addEventListener('submit', function(e) {
                const password = document.getElementById('driver_password').value;
                const confirmPassword = document.getElementById('driver_password_confirmation').value;
                
                if (password !== confirmPassword) {
                    e.preventDefault();
                    alert('Passwords do not match');
                    return;
                }
                
                if (!document.getElementById('driver_terms').checked) {
                    e.preventDefault();
                    alert('You must agree to the terms and conditions');
                    return;
                }
                
                if (!document.getElementById('background_check').checked) {
                    e.preventDefault();
                    alert('You must consent to a background check');
                    return;
                }
            });
        }
    });
</script>
@endpush
@endsection
```

## Step 4: Dashboard Views

### Client Dashboard

```bash
touch resources/views/client/dashboard.blade.php
```

```php
<!-- resources/views/client/dashboard.blade.php -->
@extends('layouts.app')

@section('title', 'Client Dashboard')

@section('content')
<div class="d-flex">
    <!-- Sidebar -->
    <div class="sidebar bg-primary text-white">
        <div class="sidebar-header p-3">
            <h4>DeliveryApp</h4>
            <p class="mb-0 text-white-50">Client Dashboard</p>
        </div>
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link active" href="{{ route('client.dashboard') }}">
                    <i class="fas fa-tachometer-alt me-2"></i> Dashboard
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" data-bs-toggle="modal" data-bs-target="#newDeliveryModal">
                    <i class="fas fa-plus-circle me-2"></i> New Delivery
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('client.deliveries') }}">
                    <i class="fas fa-list-alt me-2"></i> My Deliveries
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('client.messages') }}">
                    <i class="fas fa-comments me-2"></i> Messages
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('client.payments') }}">
                    <i class="fas fa-wallet me-2"></i> Payments
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('client.settings') }}">
                    <i class="fas fa-cog me-2"></i> Settings
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content flex-grow-1">
        <!-- Top Navigation -->
        <nav class="navbar navbar-expand navbar-light bg-white border-bottom">
            <div class="container-fluid">
                <button class="btn btn-sm btn-primary d-lg-none" id="sidebarToggle">
                    <i class="fas fa-bars"></i>
                </button>
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="fas fa-bell"></i>
                            <span class="badge bg-danger rounded-pill">{{ auth()->user()->unreadNotifications->count() }}</span>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><h6 class="dropdown-header">Notifications</h6></li>
                            @foreach(auth()->user()->unreadNotifications->take(3) as $notification)
                                <li><a class="dropdown-item" href="#">{{ $notification->data['message'] }}</a></li>
                            @endforeach
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <img src="{{ auth()->user()->avatar ? asset('storage/'.auth()->user()->avatar) : asset('img/user-avatar.jpg') }}" alt="User" class="rounded-circle" width="30">
                            <span class="ms-2 d-none d-lg-inline">{{ auth()->user()->name }}</span>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="{{ route('client.profile') }}">Profile</a></li>
                            <li><a class="dropdown-item" href="{{ route('client.settings') }}">Settings</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <form action="{{ route('logout') }}" method="POST">
                                    @csrf
                                    <button type="submit" class="dropdown-item">Logout</button>
                                </form>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
        </nav>

        <!-- Dashboard Content -->
        <div class="container-fluid p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Dashboard</h2>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newDeliveryModal">
                    <i class="fas fa-plus me-2"></i> New Delivery
                </button>
            </div>

            <!-- Stats Cards -->
            <div class="row g-4 mb-4">
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-2">Active Deliveries</h6>
                                    <h3 class="mb-0">{{ $activeDeliveries }}</h3>
                                </div>
                                <div class="bg-primary bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-truck text-primary"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-2">Completed</h6>
                                    <h3 class="mb-0">{{ $completedDeliveries }}</h3>
                                </div>
                                <div class="bg-success bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-check-circle text-success"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-2">Total Spent</h6>
                                    <h3 class="mb-0">${{ number_format($totalSpent, 2) }}</h3>
                                </div>
                                <div class="bg-warning bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-dollar-sign text-warning"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Active Deliveries -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Active Deliveries</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Driver</th>
                                    <th>Pickup Location</th>
                                    <th>Destination</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($deliveries as $delivery)
                                <tr>
                                    <td>#{{ $delivery->id }}</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="{{ $delivery->driver->avatar ? asset('storage/'.$delivery->driver->avatar) : asset('img/driver-avatar.jpg') }}" alt="Driver" class="rounded-circle me-2" width="30">
                                            <span>{{ $delivery->driver->name }}</span>
                                        </div>
                                    </td>
                                    <td>{{ $delivery->pickup_location }}</td>
                                    <td>{{ $delivery->destination }}</td>
                                    <td>
                                        @if($delivery->status === 'pending')
                                            <span class="badge bg-secondary">Pending</span>
                                        @elseif($delivery->status === 'accepted')
                                            <span class="badge bg-info">Accepted</span>
                                        @elseif($delivery->status === 'in_progress')
                                            <span class="badge bg-warning">In Progress</span>
                                        @elseif($delivery->status === 'completed')
                                            <span class="badge bg-success">Completed</span>
                                        @elseif($delivery->status === 'cancelled')
                                            <span class="badge bg-danger">Cancelled</span>
                                        @endif
                                    </td>
                                    <td>
                                        <a href="{{ route('client.deliveries.track', $delivery->id) }}" class="btn btn-sm btn-outline-primary">Track</a>
                                        <a href="{{ route('client.messages.show', $delivery->id) }}" class="btn btn-sm btn-outline-secondary">Chat</a>
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Recent Deliveries -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Recent Deliveries</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Driver</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Rating</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($recentDeliveries as $delivery)
                                <tr>
                                    <td>#{{ $delivery->id }}</td>
                                    <td>{{ $delivery->driver->name }}</td>
                                    <td>{{ $delivery->created_at->format('Y-m-d') }}</td>
                                    <td>${{ number_format($delivery->price, 2) }}</td>
                                    <td>
                                        <div class="rating">
                                            @for($i = 1; $i <= 5; $i++)
                                                @if($i <= ($delivery->review->rating ?? 0))
                                                    <i class="fas fa-star text-warning"></i>
                                                @else
                                                    <i class="far fa-star text-warning"></i>
                                                @endif
                                            @endfor
                                        </div>
                                    </td>
                                    <td><span class="badge bg-success">Completed</span></td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Delivery Modal -->
<div class="modal fade" id="newDeliveryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New Delivery Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form action="{{ route('client.deliveries.store') }}" method="POST">
                @csrf
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="pickup_location" class="form-label">Pickup Location</label>
                            <input type="text" class="form-control" id="pickup_location" name="pickup_location" required>
                        </div>
                        <div class="col-md-6">
                            <label for="destination" class="form-label">Destination</label>
                            <input type="text" class="form-control" id="destination" name="destination" required>
                        </div>
                        <div class="col-md-4">
                            <label for="package_type" class="form-label">Package Type</label>
                            <select class="form-select" id="package_type" name="package_type">
                                <option value="small" selected>Small (0-5kg)</option>
                                <option value="medium">Medium (5-15kg)</option>
                                <option value="large">Large (15-30kg)</option>
                                <option value="extra_large">Extra Large (30+ kg)</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="delivery_type" class="form-label">Delivery Type</label>
                            <select class="form-select" id="delivery_type" name="delivery_type">
                                <option value="standard" selected>Standard (1-3 days)</option>
                                <option value="express">Express (Same day)</option>
                                <option value="overnight">Overnight</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="delivery_date" class="form-label">Delivery Date</label>
                            <input type="date" class="form-control" id="delivery_date" name="delivery_date">
                        </div>
                        <div class="col-12">
                            <label for="special_instructions" class="form-label">Special Instructions</label>
                            <textarea class="form-control" id="special_instructions" name="special_instructions" rows="3"></textarea>
                        </div>
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="auto_assign" name="auto_assign" checked>
                                <label class="form-check-label" for="auto_assign">
                                    Auto-assign driver (recommended)
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit Request</button>
                </div>
            </form>
        </div>
    </div>
</div>

@push('scripts')
<script>
    // Toggle sidebar on mobile
    document.addEventListener('DOMContentLoaded', function() {
        const sidebarToggle = document.getElementById('sidebarToggle');
        const sidebar = document.querySelector('.sidebar');
        const mainContent = document.querySelector('.main-content');
        
        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', function() {
                sidebar.classList.toggle('active');
                mainContent.classList.toggle('active');
            });
        }

        // Track button functionality
        document.querySelectorAll('.btn-outline-primary').forEach(btn => {
            if (btn.textContent.trim() === 'Track') {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    window.location.href = btn.getAttribute('href');
                });
            }
        });

        // Chat button functionality
        document.querySelectorAll('.btn-outline-secondary').forEach(btn => {
            if (btn.textContent.trim() === 'Chat') {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    window.location.href = btn.getAttribute('href');
                });
            }
        });
    });
</script>
@endpush
@endsection
```

### Driver Dashboard

```bash
touch resources/views/driver/dashboard.blade.php
```

```php
<!-- resources/views/driver/dashboard.blade.php -->
@extends('layouts.app')

@section('title', 'Driver Dashboard')

@section('content')
<div class="container dashboard-container">
    <!-- Driver Profile Section -->
    <div class="profile-section row">
        <div class="col-md-4 text-center">
            <img src="{{ auth()->user()->avatar ? asset('storage/'.auth()->user()->avatar) : asset('img/driver-avatar.jpg') }}" alt="Profile Image" class="profile-img">
        </div>
        <div class="col-md-8">
            <h3>{{ auth()->user()->name }}</h3>
            <p><strong>Vehicle:</strong> {{ auth()->user()->driverProfile->vehicle_type }}</p>
            <p><strong>Plate Number:</strong> {{ auth()->user()->driverProfile->plate_number }}</p>
            <p><strong>Location:</strong> {{ auth()->user()->driverProfile->workingAreas->first()->city ?? 'Not specified' }}</p>
            <a href="{{ route('driver.profile.edit') }}" class="btn btn-primary">Edit Profile</a>
        </div>
    </div>

    <!-- Task Management Section -->
    <div class="task-section">
        <h4 class="card-title">Assigned Deliveries</h4>
        <div class="task-list">
            @foreach($deliveries as $delivery)
            <div class="task-item">
                <p><strong>Order #{{ $delivery->id }}</strong></p>
                <p>Pickup: {{ $delivery->pickup_location }}, Drop-off: {{ $delivery->destination }}</p>
                <p class="task-status">Status: 
                    @if($delivery->status === 'pending')
                        <span class="text-secondary">Pending</span>
                    @elseif($delivery->status === 'accepted')
                        <span class="text-info">Accepted</span>
                    @elseif($delivery->status === 'in_progress')
                        <span class="text-warning">In Progress</span>
                    @elseif($delivery->status === 'completed')
                        <span class="text-success">Completed</span>
                    @elseif($delivery->status === 'cancelled')
                        <span class="text-danger">Cancelled</span>
                    @endif
                </p>
                <div class="mt-2">
                    @if($delivery->status === 'pending')
                        <form action="{{ route('driver.deliveries.update-status', $delivery->id) }}" method="POST" class="d-inline">
                            @csrf
                            @method('PUT')
                            <input type="hidden" name="status" value="accepted">
                            <button type="submit" class="btn btn-sm btn-success me-2">Accept</button>
                        </form>
                        <form action="{{ route('driver.deliveries.update-status', $delivery->id) }}" method="POST" class="d-inline">
                            @csrf
                            @method('PUT')
                            <input type="hidden" name="status" value="cancelled">
                            <button type="submit" class="btn btn-sm btn-danger">Reject</button>
                        </form>
                    @elseif($delivery->status === 'accepted')
                        <form action="{{ route('driver.deliveries.update-status', $delivery->id) }}" method="POST" class="d-inline">
                            @csrf
                            @method('PUT')
                            <input type="hidden" name="status" value="in_progress">
                            <button type="submit" class="btn btn-sm btn-primary me-2">Start Delivery</button>
                        </form>
                    @elseif($delivery->status === 'in_progress')
                        <form action="{{ route('driver.deliveries.update-status', $delivery->id) }}" method="POST" class="d-inline">
                            @csrf
                            @method('PUT')
                            <input type="hidden" name="status" value="completed">
                            <button type="submit" class="btn btn-sm btn-success me-2">Complete Delivery</button>
                        </form>
                    @endif
                    <a href="{{ route('driver.deliveries.chat', $delivery->id) }}" class="btn btn-sm btn-outline-secondary">Chat</a>
                </div>
            </div>
            @endforeach
        </div>
    </div>

    <!-- Earnings Overview Section -->
    <div class="earnings-section">
        <h4 class="card-title">Earnings Overview</h4>
        <div class="earnings-summary">
            <p><strong>Total Earnings:</strong> ${{ number_format($totalEarnings, 2) }}</p>
            <p><strong>Pending Payments:</strong> ${{ number_format($pendingPayments, 2) }}</p>
            <p><strong>Completed Deliveries:</strong> {{ $completedDeliveries }}</p>
            <a href="{{ route('driver.earnings') }}" class="btn btn-success">View Earnings Details</a>
        </div>
    </div>

    <!-- Notifications Section -->
    <div class="notification-section">
        <h4 class="card-title">Notifications</h4>
        @foreach(auth()->user()->notifications->take(3) as $notification)
        <div class="notification">
            <p><strong>{{ $notification->data['title'] ?? 'Notification' }}:</strong> {{ $notification->data['message'] }}</p>
        </div>
        @endforeach
    </div>
</div>

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Example of handling a notification click
        document.querySelectorAll('.notification').forEach(notification => {
            notification.addEventListener('click', () => {
                alert("You clicked on a notification!");
            });
        });
    });
</script>
@endpush
@endsection
```

### Admin Dashboard

```bash
touch resources/views/admin/dashboard.blade.php
```

```php
<!-- resources/views/admin/dashboard.blade.php -->
@extends('layouts.app')

@section('title', 'Admin Dashboard')

@section('content')
<div class="d-flex">
    <!-- Sidebar -->
    <div class="sidebar bg-primary text-white">
        <div class="sidebar-header p-3">
            <h4>DeliveryApp</h4>
            <p class="mb-0 text-white-50">Admin Dashboard</p>
        </div>
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link active" href="{{ route('admin.dashboard') }}">
                    <i class="fas fa-tachometer-alt me-2"></i> Dashboard
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('admin.drivers.pending') }}">
                    <i class="fas fa-user-clock me-2"></i> Pending Drivers
                    <span class="badge bg-danger rounded-pill ms-auto">{{ $pendingDriversCount }}</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('admin.drivers.active') }}">
                    <i class="fas fa-users me-2"></i> Active Drivers
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('admin.clients') }}">
                    <i class="fas fa-user-friends me-2"></i> Clients
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('admin.deliveries') }}">
                    <i class="fas fa-truck me-2"></i> Deliveries
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('admin.payments') }}">
                    <i class="fas fa-money-bill-wave me-2"></i> Payments
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('admin.loyalty') }}">
                    <i class="fas fa-award me-2"></i> Loyalty Program
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('admin.reports') }}">
                    <i class="fas fa-chart-bar me-2"></i> Reports
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="{{ route('admin.settings') }}">
                    <i class="fas fa-cog me-2"></i> Settings
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content flex-grow-1">
        <!-- Top Navigation -->
        <nav class="navbar navbar-expand navbar-light bg-white border-bottom">
            <div class="container-fluid">
                <button class="btn btn-sm btn-primary d-lg-none" id="sidebarToggle">
                    <i class="fas fa-bars"></i>
                </button>
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="fas fa-bell"></i>
                            <span class="badge bg-danger rounded-pill">{{ auth()->user()->unreadNotifications->count() }}</span>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><h6 class="dropdown-header">Notifications</h6></li>
                            @foreach(auth()->user()->unreadNotifications->take(5) as $notification)
                                <li><a class="dropdown-item" href="#">{{ $notification->data['message'] }}</a></li>
                            @endforeach
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <img src="{{ auth()->user()->avatar ? asset('storage/'.auth()->user()->avatar) : asset('img/admin-avatar.jpg') }}" alt="Admin" class="rounded-circle" width="30">
                            <span class="ms-2 d-none d-lg-inline">{{ auth()->user()->name }}</span>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="{{ route('admin.profile') }}">Profile</a></li>
                            <li><a class="dropdown-item" href="{{ route('admin.settings') }}">Settings</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <form action="{{ route('logout') }}" method="POST">
                                    @csrf
                                    <button type="submit" class="dropdown-item">Logout</button>
                                </form>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
        </nav>

        <!-- Dashboard Content -->
        <div class="container-fluid p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Admin Dashboard</h2>
                <div class="btn-group">
                    <button class="btn btn-outline-primary">Export Data</button>
                    <button class="btn btn-primary">Generate Report</button>
                </div>
            </div>

            <!-- Stats Cards -->
            <div class="row g-4 mb-4">
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-2">Total Deliveries</h6>
                                    <h3 class="mb-0">{{ $totalDeliveries }}</h3>
                                    <small class="text-success"><i class="fas fa-arrow-up me-1"></i> 12% from last week</small>
                                </div>
                                <div class="bg-primary bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-truck text-primary"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-2">Active Drivers</h6>
                                    <h3 class="mb-0">{{ $activeDrivers }}</h3>
                                    <small class="text-success"><i class="fas fa-arrow-up me-1"></i> 5 new this week</small>
                                </div>
                                <div class="bg-success bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-users text-success"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-2">Registered Clients</h6>
                                    <h3 class="mb-0">{{ $registeredClients }}</h3>
                                    <small class="text-success"><i class="fas fa-arrow-up me-1"></i> 8% from last week</small>
                                </div>
                                <div class="bg-info bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-user-friends text-info"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-2">Total Revenue</h6>
                                    <h3 class="mb-0">${{ number_format($totalRevenue, 2) }}</h3>
                                    <small class="text-success"><i class="fas fa-arrow-up me-1"></i> 15% from last month</small>
                                </div>
                                <div class="bg-warning bg-opacity-10 p-3 rounded">
                                    <i class="fas fa-dollar-sign text-warning"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts Row -->
            <div class="row g-4 mb-4">
                <div class="col-lg-8">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-header bg-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Delivery Statistics</h5>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-outline-secondary active">Weekly</button>
                                <button class="btn btn-sm btn-outline-secondary">Monthly</button>
                                <button class="btn btn-sm btn-outline-secondary">Yearly</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <canvas id="deliveryChart" height="250"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-header bg-white">
                            <h5 class="mb-0">Delivery Status</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="statusChart" height="250"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Pending Drivers -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Pending Driver Approvals</h5>
                    <span class="badge bg-danger">{{ $pendingDriversCount }} New Applications</span>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="pendingDriversTable">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Vehicle Type</th>
                                    <th>Applied On</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($pendingDrivers as $driver)
                                <tr>
                                    <td>DRV-{{ $driver->id }}</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="{{ $driver->avatar ? asset('storage/'.$driver->avatar) : asset('img/driver-avatar.jpg') }}" alt="Driver" class="rounded-circle me-2" width="30">
                                            <span>{{ $driver->name }}</span>
                                        </div>
                                    </td>
                                    <td>{{ $driver->email }}</td>
                                    <td>{{ ucfirst($driver->driverProfile->vehicle_type) }}</td>
                                    <td>{{ $driver->created_at->format('Y-m-d') }}</td>
                                    <td>
                                        <form action="{{ route('admin.drivers.approve', $driver->id) }}" method="POST" class="d-inline">
                                            @csrf
                                            <button type="submit" class="btn btn-sm btn-success me-2">Approve</button>
                                        </form>
                                        <button class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#driverDetailsModal-{{ $driver->id }}">View</button>
                                        <form action="{{ route('admin.drivers.reject', $driver->id) }}" method="POST" class="d-inline">
                                            @csrf
                                            @method('DELETE')
                                            <button type="submit" class="btn btn-sm btn-outline-danger">Reject</button>
                                        </form>
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Recent Deliveries -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Recent Deliveries</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="recentDeliveriesTable">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Client</th>
                                    <th>Driver</th>
                                    <th>Pickup</th>
                                    <th>Destination</th>
                                    <th>Status</th>
                                    <th>Amount</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($recentDeliveries as $delivery)
                                <tr>
                                    <td>DEL-{{ $delivery->id }}</td>
                                    <td>{{ $delivery->client->name }}</td>
                                    <td>{{ $delivery->driver->name ?? 'Unassigned' }}</td>
                                    <td>{{ $delivery->pickup_location }}</td>
                                    <td>{{ $delivery->destination }}</td>
                                    <td>
                                        @if($delivery->status === 'pending')
                                            <span class="badge bg-secondary">Pending</span>
                                        @elseif($delivery->status === 'accepted')
                                            <span class="badge bg-info">Accepted</span>
                                        @elseif($delivery->status === 'in_progress')
                                            <span class="badge bg-warning">In Progress</span>
                                        @elseif($delivery->status === 'completed')
                                            <span class="badge bg-success">Completed</span>
                                        @elseif($delivery->status === 'cancelled')
                                            <span class="badge bg-danger">Cancelled</span>
                                        @endif
                                    </td>
                                    <td>${{ number_format($delivery->price, 2) }}</td>
                                    <td>
                                        <a href="{{ route('admin.deliveries.show', $delivery->id) }}" class="btn btn-sm btn-outline-primary">Details</a>
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Driver Details Modals -->
@foreach($pendingDrivers as $driver)
<div class="modal fade" id="driverDetailsModal-{{ $driver->id }}" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Driver Application Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-4 text-center">
                        <img src="{{ $driver->avatar ? asset('storage/'.$driver->avatar) : asset('img/driver-avatar.jpg') }}" alt="Driver" class="img-fluid rounded-circle mb-3" width="150">
                        <h4>{{ $driver->name }}</h4>
                        <p class="text-muted">Application ID: DRV-{{ $driver->id }}</p>
                        <div class="d-flex justify-content-center gap-2 mb-4">
                            <span class="badge bg-primary">{{ ucfirst($driver->driverProfile->vehicle_type) }}</span>
                            @foreach($driver->driverProfile->workingAreas as $area)
                                <span class="badge bg-secondary">{{ $area->city }}</span>
                            @endforeach
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Contact Information</h6>
                                <p><i class="fas fa-envelope me-2"></i> {{ $driver->email }}</p>
                                <p><i class="fas fa-phone me-2"></i> {{ $driver->phone }}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Vehicle Details</h6>
                                <p><i class="fas fa-car me-2"></i> {{ $driver->driverProfile->vehicle_type }}</p>
                                <p><i class="fas fa-id-card me-2"></i> Plate: {{ $driver->driverProfile->plate_number }}</p>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>License Information</h6>
                                <p>License Number: {{ $driver->driverProfile->license_number }}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Pricing Model</h6>
                                <p>Model: {{ ucfirst(str_replace('_', ' ', $driver->driverProfile->pricing_model)) }}</p>
                                @if($driver->driverProfile->pricing_model === 'fixed')
                                    <p>Fixed Price: ${{ number_format($driver->driverProfile->fixed_price, 2) }}</p>
                                @else
                                    <p>Price per km: ${{ number_format($driver->driverProfile->price_per_km, 2) }}</p>
                                @endif
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <h6>Working Areas</h6>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach($driver->driverProfile->workingAreas as $area)
                                    <span class="badge bg-light text-dark">{{ $area->city }}</span>
                                @endforeach
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <form action="{{ route('admin.drivers.reject', $driver->id) }}" method="POST" class="d-inline">
                    @csrf
                    @method('DELETE')
                    <button type="submit" class="btn btn-danger">Reject Application</button>
                </form>
                <form action="{{ route('admin.drivers.approve', $driver->id) }}" method="POST" class="d-inline">
                    @csrf
                    <button type="submit" class="btn btn-success">Approve Driver</button>
                </form>
            </div>
        </div>
    </div>
</div>
@endforeach

@push('scripts')
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle sidebar on mobile
        const sidebarToggle = document.getElementById('sidebarToggle');
        const sidebar = document.querySelector('.sidebar');
        const mainContent = document.querySelector('.main-content');
        
        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', function() {
                sidebar.classList.toggle('active');
                mainContent.classList.toggle('active');
            });
        }

        // Delivery Statistics Chart
        const deliveryCtx = document.getElementById('deliveryChart').getContext('2d');
        const deliveryChart = new Chart(deliveryCtx, {
            type: 'line',
            data: {
                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                datasets: [
                    {
                        label: 'Completed Deliveries',
                        data: [45, 60, 55, 70, 85, 60, 40],
                        borderColor: '#0d6efd',
                        backgroundColor: 'rgba(13, 110, 253, 0.1)',
                        tension: 0.3,
                        fill: true
                    },
                    {
                        label: 'Cancelled Deliveries',
                        data: [5, 8, 6, 10, 7, 4, 3],
                        borderColor: '#dc3545',
                        backgroundColor: 'rgba(220, 53, 69, 0.1)',
                        tension: 0.3,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        // Delivery Status Chart
        const statusCtx = document.getElementById('statusChart').getContext('2d');
        const statusChart = new Chart(statusCtx, {
            type: 'doughnut',
            data: {
                labels: ['Completed', 'In Progress', 'Pending', 'Cancelled'],
                datasets: [{
                    data: [65, 15, 10, 10],
                    backgroundColor: [
                        '#198754',
                        '#0dcaf0',
                        '#ffc107',
                        '#dc3545'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                    }
                }
            }
        });
    });
</script>
@endpush
@endsection
```

## Step 5: Payment View

```bash
touch resources/views/client/payment.blade.php
```

```php
<!-- resources/views/client/payment.blade.php -->
@extends('layouts.app')

@section('title', 'Payment')

@section('content')
<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
        <a class="navbar-brand" href="{{ route('home') }}">DeliveryApp</a>
        <div class="navbar-text ms-auto">
            <span class="text-white">Order #DEL-{{ $delivery->id }}</span>
        </div>
    </div>
</nav>

<div class="container py-5">
    <div class="row">
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white">
                    <h4 class="mb-0">Payment Method</h4>
                </div>
                <div class="card-body">
                    <!-- Payment Method Selection -->
                    <div class="mb-4">
                        <div class="row g-3">
                            <!-- Credit/Debit Card -->
                            <div class="col-md-6">
                                <div class="payment-method p-3 rounded active" id="cardMethod">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="creditCard" checked>
                                        <label class="form-check-label fw-bold" for="creditCard">
                                            <i class="far fa-credit-card me-2"></i> Credit/Debit Card
                                        </label>
                                    </div>
                                    <div class="mt-2">
                                        <img src="{{ asset('img/visa.png') }}" alt="Visa" width="40" class="me-2">
                                        <img src="{{ asset('img/mastercard.png') }}" alt="Mastercard" width="40" class="me-2">
                                        <img src="{{ asset('img/paypal.png') }}" alt="PayPal" width="40">
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Cryptocurrency -->
                            <div class="col-md-6">
                                <div class="payment-method p-3 rounded" id="cryptoMethod">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="cryptocurrency">
                                        <label class="form-check-label fw-bold" for="cryptocurrency">
                                            <i class="fab fa-bitcoin me-2"></i> Cryptocurrency
                                        </label>
                                    </div>
                                    <div class="mt-2">
                                        <small class="text-muted">Pay with Bitcoin, Ethereum, or other cryptocurrencies</small>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Cash on Delivery -->
                            <div class="col-md-6">
                                <div class="payment-method p-3 rounded" id="codMethod">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="cashOnDelivery">
                                        <label class="form-check-label fw-bold" for="cashOnDelivery">
                                            <i class="fas fa-money-bill-wave me-2"></i> Cash on Delivery
                                        </label>
                                    </div>
                                    <div class="mt-2">
                                        <small class="text-muted">Pay when you receive your delivery</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Credit Card Form (Visible by default) -->
                    <form id="creditCardForm" action="{{ route('client.payments.process', $delivery->id) }}" method="POST">
                        @csrf
                        <input type="hidden" name="payment_method" value="credit_card">
                        <div id="creditCardFormContent">
                            <h5 class="mb-3">Card Details</h5>
                            <div class="row g-3">
                                <div class="col-12">
                                    <label for="card_number" class="form-label">Card Number</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="card_number" name="card_number" placeholder="1234 5678 9012 3456" required>
                                        <span class="input-group-text"><i class="far fa-credit-card"></i></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label for="card_name" class="form-label">Name on Card</label>
                                    <input type="text" class="form-control" id="card_name" name="card_name" placeholder="John Doe" required>
                                </div>
                                <div class="col-md-3">
                                    <label for="card_expiry" class="form-label">Expiry Date</label>
                                    <input type="text" class="form-control" id="card_expiry" name="card_expiry" placeholder="MM/YY" required>
                                </div>
                                <div class="col-md-3">
                                    <label for="card_cvv" class="form-label">CVV</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="card_cvv" name="card_cvv" placeholder="123" required>
                                        <span class="input-group-text" data-bs-toggle="tooltip" title="3-digit code on back of card">
                                            <i class="fas fa-question-circle"></i>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="save_card" name="save_card">
                                        <label class="form-check-label" for="save_card">
                                            Save card for future payments
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>

                    <!-- Cryptocurrency Form (Hidden by default) -->
                    <form id="cryptoForm" action="{{ route('client.payments.process', $delivery->id) }}" method="POST" style="display: none;">
                        @csrf
                        <input type="hidden" name="payment_method" value="cryptocurrency">
                        <div id="cryptoFormContent">
                            <h5 class="mb-3">Select Cryptocurrency</h5>
                            <div class="mb-4">
                                <div class="crypto-option active" data-crypto="bitcoin">
                                    <img src="{{ asset('img/bitcoin.png') }}" alt="Bitcoin" class="crypto-icon">
                                    <div>
                                        <h6 class="mb-0">Bitcoin (BTC)</h6>
                                        <small class="text-muted">1 BTC = $28,450.00</small>
                                    </div>
                                </div>
                                <div class="crypto-option" data-crypto="ethereum">
                                    <img src="{{ asset('img/ethereum.png') }}" alt="Ethereum" class="crypto-icon">
                                    <div>
                                        <h6 class="mb-0">Ethereum (ETH)</h6>
                                        <small class="text-muted">1 ETH = $1,780.00</small>
                                    </div>
                                </div>
                                <div class="crypto-option" data-crypto="litecoin">
                                    <img src="{{ asset('img/litecoin.png') }}" alt="Litecoin" class="crypto-icon">
                                    <div>
                                        <h6 class="mb-0">Litecoin (LTC)</h6>
                                        <small class="text-muted">1 LTC = $85.00</small>
                                    </div>
                                </div>
                            </div>
                            <div class="border p-3 rounded bg-light">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Amount to Pay:</span>
                                    <strong>${{ number_format($delivery->price, 2) }}</strong>
                                </div>
                                <div class="d-flex justify-content-between mb-3">
                                    <span>Network Fee:</span>
                                    <strong>$0.50</strong>
                                </div>
                                <div class="d-flex justify-content-between fw-bold">
                                    <span>Total in BTC:</span>
                                    <strong>0.00088 BTC</strong>
                                </div>
                            </div>
                            <div class="mt-4">
                                <h6>Wallet Address</h6>
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" value="3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5" readonly>
                                    <button class="btn btn-outline-secondary" type="button" id="copyAddress">
                                        <i class="far fa-copy"></i>
                                    </button>
                                </div>
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Send exactly 0.00088 BTC to this address. Your order will be confirmed after 3 network confirmations.
                                </div>
                            </div>
                            <input type="hidden" name="cryptocurrency" id="selectedCrypto" value="bitcoin">
                        </div>
                    </form>

                    <!-- Cash on Delivery Info (Hidden by default) -->
                    <form id="codForm" action="{{ route('client.payments.process', $delivery->id) }}" method="POST" style="display: none;">
                        @csrf
                        <input type="hidden" name="payment_method" value="cash_on_delivery">
                        <div id="codFormContent">
                            <div class="alert alert-success">
                                <i class="fas fa-check-circle me-2"></i>
                                You have selected Cash on Delivery. No payment is required now.
                            </div>
                            <div class="border p-3 rounded bg-light">
                                <h6 class="mb-3">Payment Instructions</h6>
                                <ul>
                                    <li>Please prepare exact change for the driver</li>
                                    <li>The total amount to pay is <strong>${{ number_format($delivery->price, 2) }}</strong></li>
                                    <li>Driver will provide a receipt upon payment</li>
                                    <li>No additional fees will be charged</li>
                                </ul>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card border-0 shadow-sm sticky-top" style="top: 20px;">
                <div class="card-header bg-white">
                    <h4 class="mb-0">Order Summary</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6>Delivery Details</h6>
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-muted">From:</span>
                            <span>{{ $delivery->pickup_location }}</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-muted">To:</span>
                            <span>{{ $delivery->destination }}</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-muted">Distance:</span>
                            <span>{{ $delivery->distance }} km</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-muted">Driver:</span>
                            <span>{{ $delivery->driver->name }}</span>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <div class="mb-3">
                        <h6>Payment Summary</h6>
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-muted">Base Fare:</span>
                            <span>$5.00</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-muted">Distance ({{ $delivery->distance }}km × $1.20):</span>
                            <span>${{ number_format($delivery->distance * 1.2, 2) }}</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-muted">Service Fee:</span>
                            <span>$1.50</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-muted">Tax:</span>
                            <span>$2.16</span>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <!-- Currency Selection -->
                    <div class="mb-3">
                        <label for="currencySelect" class="form-label">Select Currency</label>
                        <select class="form-select" id="currencySelect">
                            <option value="USD" selected>US Dollar (USD)</option>
                            <option value="EUR">Euro (EUR)</option>
                            <option value="GBP">British Pound (GBP)</option>
                            <option value="LBP">Lebanese Pound (LBP)</option>
                            <option value="BTC">Bitcoin (BTC)</option>
                            <option value="ETH">Ethereum (ETH)</option>
                        </select>
                    </div>
                    
                    <div class="d-flex justify-content-between fw-bold fs-5">
                        <span>Total:</span>
                        <span>${{ number_format($delivery->price, 2) }}</span>
                    </div>
                    
                    <button type="button" class="btn btn-primary btn-lg w-100 mt-3" id="completePayment">
                        Complete Payment
                    </button>
                    
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="termsAgreement" checked required>
                        <label class="form-check-label" for="termsAgreement">
                            I agree to the <a href="#">Terms of Service</a>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Payment Success Modal -->
<div class="modal fade" id="paymentSuccessModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center p-5">
                <div class="icon-success mb-4">
                    <i class="fas fa-check-circle text-success" style="font-size: 5rem;"></i>
                </div>
                <h3 class="mb-3">Payment Successful!</h3>
                <p class="mb-4">Your payment of ${{ number_format($delivery->price, 2) }} has been processed successfully. Your delivery is on the way.</p>
                <div class="d-grid gap-2">
                    <a href="{{ route('client.deliveries.track', $delivery->id) }}" class="btn btn-primary" data-bs-dismiss="modal">Track Delivery</a>
                    <a href="{{ route('client.dashboard') }}" class="btn btn-outline-secondary">Back to Dashboard</a>
                </div>
            </div>
        </div>
    </div>
</div>

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Toggle payment method forms
        document.querySelectorAll('.payment-method').forEach(function(method) {
            method.addEventListener('click', function() {
                // Remove active class from all methods
                document.querySelectorAll('.payment-method').forEach(function(item) {
                    item.classList.remove('active');
                });

                // Add active class to the clicked method
                method.classList.add('active');

                // Show/hide forms based on selected method
                if (method.id === 'cardMethod') {
                    document.getElementById('creditCardFormContent').style.display = 'block';
                    document.getElementById('cryptoFormContent').style.display = 'none';
                    document.getElementById('codFormContent').style.display = 'none';
                } else if (method.id === 'cryptoMethod') {
                    document.getElementById('creditCardFormContent').style.display = 'none';
                    document.getElementById('cryptoFormContent').style.display = 'block';
                    document.getElementById('codFormContent').style.display = 'none';
                } else if (method.id === 'codMethod') {
                    document.getElementById('creditCardFormContent').style.display = 'none';
                    document.getElementById('cryptoFormContent').style.display = 'none';
                    document.getElementById('codFormContent').style.display = 'block';
                }
            });
        });

        // Select cryptocurrency
        document.querySelectorAll('.crypto-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.crypto-option').forEach(opt => {
                    opt.classList.remove('active');
                });
                this.classList.add('active');
                document.getElementById('selectedCrypto').value = this.dataset.crypto;
            });
        });

        // Currency selection
        const currencySelect = document.getElementById('currencySelect');
        currencySelect.addEventListener('change', function() {
            const selectedCurrency = currencySelect.value;
            const totalAmount = document.querySelector('.fs-5 span:last-child');
            if (selectedCurrency === 'USD') {
                totalAmount.textContent = '${{ number_format($delivery->price, 2) }}';
            } else if (selectedCurrency === 'EUR') {
                totalAmount.textContent = '€{{ number_format($delivery->price * 0.85, 2) }}';
            } else if (selectedCurrency === 'GBP') {
                totalAmount.textContent = '£{{ number_format($delivery->price * 0.75, 2) }}';
            } else if (selectedCurrency === 'LBP') {
                totalAmount.textContent = 'LBP {{ number_format($delivery->price * 1500, 0) }}';
            } else if (selectedCurrency === 'BTC') {
                totalAmount.textContent = '0.00088 BTC';
            } else if (selectedCurrency === 'ETH') {
                totalAmount.textContent = '0.0138 ETH';
            }
        });

        // Payment completion
        const completePaymentButton = document.getElementById('completePayment');
        completePaymentButton.addEventListener('click', function() {
            if (!document.getElementById('termsAgreement').checked) {
                alert('You must agree to the Terms of Service before completing the payment.');
                return;
            }

            const selectedMethod = document.querySelector('.payment-method.active').id;
            
            if (selectedMethod === 'cardMethod') {
                document.getElementById('creditCardForm').submit();
            } else if (selectedMethod === 'cryptoMethod') {
                document.getElementById('cryptoForm').submit();
            } else if (selectedMethod === 'codMethod') {
                document.getElementById('codForm').submit();
            }
        });

        // Copy wallet address
        const copyAddressButton = document.getElementById('copyAddress');
        if (copyAddressButton) {
            copyAddressButton.addEventListener('click', function() {
                const walletAddressInput = document.querySelector('#cryptoForm input[type="text"]');
                walletAddressInput.select();
                walletAddressInput.setSelectionRange(0, 99999); // For mobile devices
                document.execCommand('copy');
                alert('Wallet address copied to clipboard!');
            });
        }
    });
</script>
@endpush
@endsection
```

## Step 6: Live Chat View

```bash
touch resources/views/client/livechat.blade.php
```

```php
<!-- resources/views/client/livechat.blade.php -->
@extends('layouts.app')

@section('title', 'Live Chat')

@section('content')
<div class="chat-container">
    <div class="chat-header">Live Chat with Driver</div>
    <div class="chat-messages" id="chatMessages">
        @foreach($messages as $message)
            <div class="message {{ $message->sender_id === auth()->id() ? 'sent' : 'received' }}">
                <div class="bubble">{{ $message->message }}</div>
            </div>
        @endforeach
    </div>
    <div class="chat-input">
        <input type="text" id="chatInput" placeholder="Type your message...">
        <button class="btn btn-primary" id="sendBtn">Send</button>
    </div>
</div>

@push('scripts')
<script src="https://js.pusher.com/7.0/pusher.min.js"></script>
<script>
    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');
    const deliveryId = {{ $delivery->id }};
    const userId = {{ auth()->id() }};
    const driverId = {{ $delivery->driver_id }};

    // Enable Pusher logging - don't include this in production
    Pusher.logToConsole = true;

    var pusher = new Pusher('{{ env('PUSHER_APP_KEY') }}', {
        cluster: '{{ env('PUSHER_APP_CLUSTER') }}'
    });

    var channel = pusher.subscribe('delivery.' + deliveryId);
    channel.bind('App\\Events\\NewMessage', function(data) {
        const msgDiv = document.createElement('div');
        msgDiv.classList.add('message', data.sender_id == userId ? 'sent' : 'received');
        msgDiv.innerHTML = `<div class='bubble'>${data.message}</div>`;
        chatMessages.appendChild(msgDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    sendBtn.addEventListener('click', () => {
        const msg = chatInput.value.trim();
        if (msg) {
            // Send message via AJAX
            fetch('{{ route('client.messages.store', $delivery->id) }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token() }}'
                },
                body: JSON.stringify({
                    message: msg,
                    _token: '{{ csrf_token() }}'
                })
            })
            .then(response => response.json())
            .then(data => {
                chatInput.value = '';
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }
    });

    // Allow sending message with Enter key
    chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendBtn.click();
        }
    });
</script>
@endpush
@endsection
```

## Step 7: Routes

Update your `routes/web.php` file:

```php
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Auth\LoginController;
use App\Http\Controllers\Auth\RegisterController;
use App\Http\Controllers\Auth\VerificationController;
use App\Http\Controllers\ClientController;
use App\Http\Controllers\DriverController;
use App\Http\Controllers\AdminController;
use App\Http\Controllers\MessageController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::get('/', function () {
    return view('home');
})->name('home');

// Authentication Routes
Route::get('/login', [LoginController::class, 'showLoginForm'])->name('login');
Route::post('/login', [LoginController::class, 'login']);
Route::post('/logout', [LoginController::class, 'logout'])->name('logout');

Route::get('/register', [RegisterController::class, 'showRegistrationForm'])->name('register');
Route::post('/register', [RegisterController::class, 'register']);

Route::get('/email/verify/{token}', [VerificationController::class, 'verify'])->name('verification.verify');
Route::post('/email/resend', [VerificationController::class, 'resend'])->name('verification.resend');

// Client Routes
Route::middleware(['auth', 'verified', 'client'])->prefix('client')->group(function () {
    Route::get('/dashboard', [ClientController::class, 'dashboard'])->name('client.dashboard');
    Route::get('/deliveries', [ClientController::class, 'deliveries'])->name('client.deliveries');
    Route::post('/deliveries', [ClientController::class, 'storeDelivery'])->name('client.deliveries.store');
    Route::get('/deliveries/{delivery}/track', [ClientController::class, 'trackDelivery'])->name('client.deliveries.track');
    
    Route::get('/messages', [MessageController::class, 'index'])->name('client.messages');
    Route::get('/messages/{delivery}', [MessageController::class, 'show'])->name('client.messages.show');
    Route::post('/messages/{delivery}', [MessageController::class, 'store'])->name('client.messages.store');
    
    Route::get('/payments', [ClientController::class, 'payments'])->name('client.payments');
    Route::get('/payments/{delivery}', [ClientController::class, 'showPayment'])->name('client.payments.show');
    Route::post('/payments/{delivery}/process', [ClientController::class, 'processPayment'])->name('client.payments.process');
    
    Route::get('/profile', [ClientController::class, 'profile'])->name('client.profile');
    Route::get('/settings', [ClientController::class, 'settings'])->name('client.settings');
});

// Driver Routes
Route::middleware(['auth', 'verified', 'driver'])->prefix('driver')->group(function () {
    Route::get('/dashboard', [DriverController::class, 'dashboard'])->name('driver.dashboard');
    Route::get('/deliveries', [DriverController::class, 'deliveries'])->name('driver.deliveries');
    Route::put('/deliveries/{delivery}/status', [DriverController::class, 'updateStatus'])->name('driver.deliveries.update-status');
    Route::get('/deliveries/{delivery}/chat', [DriverController::class, 'chat'])->name('driver.deliveries.chat');
    
    Route::get('/earnings', [DriverController::class, 'earnings'])->name('driver.earnings');
    Route::get('/profile', [DriverController::class, 'profile'])->name('driver.profile');
    Route::get('/profile/edit', [DriverController::class, 'editProfile'])->name('driver.profile.edit');
    Route::put('/profile', [DriverController::class, 'updateProfile'])->name('driver.profile.update');
});

// Admin Routes
Route::middleware(['auth', 'verified', 'admin'])->prefix('admin')->group(function () {
    Route::get('/dashboard', [AdminController::class, 'dashboard'])->name('admin.dashboard');
    Route::get('/drivers/pending', [AdminController::class, 'pendingDrivers'])->name('admin.drivers.pending');
    Route::get('/drivers/active', [AdminController::class, 'activeDrivers'])->name('admin.drivers.active');
    Route::post('/drivers/{driver}/approve', [AdminController::class, 'approveDriver'])->name('admin.drivers.approve');
    Route::delete('/drivers/{driver}/reject', [AdminController::class, 'rejectDriver'])->name('admin.drivers.reject');
    
    Route::get('/clients', [AdminController::class, 'clients'])->name('admin.clients');
    Route::get('/deliveries', [AdminController::class, 'deliveries'])->name('admin.deliveries');
    Route::get('/deliveries/{delivery}', [AdminController::class, 'showDelivery'])->name('admin.deliveries.show');
    
    Route::get('/payments', [AdminController::class, 'payments'])->name('admin.payments');
    Route::get('/loyalty', [AdminController::class, 'loyalty'])->name('admin.loyalty');
    Route::get('/reports', [AdminController::class, 'reports'])->name('admin.reports');
    Route::get('/settings', [AdminController::class, 'settings'])->name('admin.settings');
    Route::get('/profile', [AdminController::class, 'profile'])->name('admin.profile');
});
```

## Step 8: Controllers

Create the necessary controllers:

```bash
php artisan make:controller ClientController
php artisan make:controller DriverController
php artisan make:controller AdminController
php artisan make:controller MessageController
```

Here's an example of the ClientController:

```php
<?php

namespace App\Http\Controllers;

use App\Models\Delivery;
use App\Models\Message;
use App\Models\Payment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ClientController extends Controller
{
    public function dashboard()
    {
        $user = Auth::user();
        
        $activeDeliveries = $user->clientDeliveries()
            ->whereIn('status', ['pending', 'accepted', 'in_progress'])
            ->count();
            
        $completedDeliveries = $user->clientDeliveries()
            ->where('status', 'completed')
            ->count();
            
        $totalSpent = $user->clientDeliveries()
            ->where('status', 'completed')
            ->sum('price');
            
        $deliveries = $user->clientDeliveries()
            ->whereIn('status', ['pending', 'accepted', 'in_progress'])
            ->with('driver')
            ->latest()
            ->take(5)
            ->get();
            
        $recentDeliveries = $user->clientDeliveries()
            ->where('status', 'completed')
            ->with(['driver', 'review'])
            ->latest()
            ->take(5)
            ->get();

        return view('client.dashboard', compact(
            'activeDeliveries',
            'completedDeliveries',
            'totalSpent',
            'deliveries',
            'recentDeliveries'
        ));
    }

    public function deliveries()
    {
        $deliveries = Auth::user()->clientDeliveries()
            ->with(['driver', 'payment', 'review'])
            ->latest()
            ->paginate(10);
            
        return view('client.deliveries', compact('deliveries'));
    }

    public function storeDelivery(Request $request)
    {
        $validated = $request->validate([
            'pickup_location' => 'required|string',
            'destination' => 'required|string',
            'package_type' => 'required|in:small,medium,large,extra_large',
            'package_weight' => 'required|numeric|min:0.1',
            'special_instructions' => 'nullable|string',
            'auto_assign' => 'required|boolean',
            'delivery_type' => 'required|in:standard,express,overnight',
            'delivery_date' => 'nullable|date',
        ]);

        // Calculate distance and price (simplified for example)
        $distance = $this->calculateDistance($validated['pickup_location'], $validated['destination']);
        $price = $this->calculatePrice($distance, $validated['package_type'], $validated['package_weight']);

        $delivery = Delivery::create([
            'client_id' => Auth::id(),
            'pickup_location' => $validated['pickup_location'],
            'destination' => $validated['destination'],
            'distance' => $distance,
            'package_type' => $validated['package_type'],
            'package_weight' => $validated['package_weight'],
            'special_instructions' => $validated['special_instructions'],
            'status' => 'pending',
            'price' => $price,
            'payment_method' => 'cash_on_delivery', // Default
        ]);

        // Auto-assign driver if selected
        if ($validated['auto_assign']) {
            $driver = $this->findAvailableDriver($validated['pickup_location']);
            if ($driver) {
                $delivery->update(['driver_id' => $driver->id]);
                
                // Notify driver
                // $driver->notify(new NewDeliveryAssignment($delivery));
            }
        }

        return redirect()->route('client.deliveries.track', $delivery->id)
            ->with('success', 'Delivery request created successfully!');
    }

    public function trackDelivery(Delivery $delivery)
    {
        if ($delivery->client_id !== Auth::id()) {
            abort(403);
        }

        return view('client.track', compact('delivery'));
    }

    public function payments()
    {
        $payments = Payment::whereHas('delivery', function($query) {
            $query->where('client_id', Auth::id());
        })->latest()->paginate(10);
        
        return view('client.payments', compact('payments'));
    }

    public function showPayment(Delivery $delivery)
    {
        if ($delivery->client_id !== Auth::id()) {
            abort(403);
        }

        return view('client.payment', compact('delivery'));
    }

    public function processPayment(Request $request, Delivery $delivery)
    {
        if ($delivery->client_id !== Auth::id()) {
            abort(403);
        }

        $validated = $request->validate([
            'payment_method' => 'required|in:credit_card,cryptocurrency,cash_on_delivery',
            'card_number' => 'required_if:payment_method,credit_card',
            'card_expiry' => 'required_if:payment_method,credit_card',
            'card_cvv' => 'required_if:payment_method,credit_card',
            'cryptocurrency' => 'required_if:payment_method,cryptocurrency|in:bitcoin,ethereum,litecoin',
        ]);

        // Process payment (simplified for example)
        $payment = Payment::create([
            'delivery_id' => $delivery->id,
            'amount' => $delivery->price,
            'method' => $validated['payment_method'],
            'status' => $validated['payment_method'] === 'cash_on_delivery' ? 'pending' : 'completed',
            'payment_details' => $validated,
        ]);

        if ($validated['payment_method'] !== 'cash_on_delivery') {
            $delivery->update(['is_paid' => true]);
        }

        return redirect()->route('client.payments.show', $delivery->id)
            ->with('success', 'Payment processed successfully!');
    }

    // Helper methods
    private function calculateDistance($pickup, $destination)
    {
        // In a real app, use a mapping API
        return rand(1, 50); // Random distance for demo
    }

    private function calculatePrice($distance, $packageType, $packageWeight)
    {
        $basePrice = 5.00;
        $typeMultipliers = [
            'small' => 1.0,
            'medium' => 1.2,
            'large' => 1.5,
            'extra_large' => 2.0,
        ];

        $weightMultiplier = min(1 + ($packageWeight / 10), 3); // Max 3x multiplier
        return $basePrice + ($distance * 1.20) * $typeMultipliers[$packageType] * $weightMultiplier;
    }

    private function findAvailableDriver($location)
    {
        // In a real app, find the nearest available driver
        return User::where('role', 'driver')
            ->whereHas('driverProfile', function($query) {
                $query->where('is_approved', true);
            })
            ->whereHas('workingAreas', function($query) use ($location) {
                $query->where('city', 'like', "%$location%");
            })
            ->inRandomOrder()
            ->first();
    }
}
```

## Step 9: Assets

Copy your CSS and JS files to the public directory:

```bash
mkdir -p public/css public/js
cp style.css public/css/
cp script.js public/js/
```

## Step 10: Middleware

Create middleware to check user roles:

```bash
php artisan make:middleware CheckClient
php artisan make:middleware CheckDriver
php artisan make:middleware CheckAdmin
```

Example for CheckClient:

```php
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class CheckClient
{
    public function handle(Request $request, Closure $next)
    {
        if (!auth()->check() || !auth()->user()->isClient()) {
            abort(403);
        }

        return $next($request);
    }
}
```

Register the middleware in `app/Http/Kernel.php`:

```php
protected $routeMiddleware = [
    // ...
    'client' => \App\Http\Middleware\CheckClient::class,
    'driver' => \App\Http\Middleware\CheckDriver::class,
    'admin' => \App\Http\Middleware\CheckAdmin::class,
];
```

## Conclusion

This implementation provides:

1. A complete Laravel view structure matching your original HTML files
2. Integration with the Laravel backend we previously created
3. Role-based access control for clients, drivers, and admins
4. All the functionality from your original frontend
5. Proper routing and controller structure
6. Blade templates with sections and stacks
7. JavaScript integration for interactive elements
8. Pusher integration for real-time chat

The views maintain all the styling and functionality from your original files while being properly integrated with the Laravel backend. Each view extends a master layout, includes proper CSRF protection, and follows Laravel best practices.

Would you like me to elaborate on any specific part of this implementation?